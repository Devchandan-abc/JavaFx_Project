package com.autouploader;

import javafx.application.Platform;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Map;
import com.eyepacs.ext.connectors.https.HttpsConnectors;
import com.eyepacs.ext.connectors.https.HttpsConnectors.RESPONSE;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import ext.eyepacs.encryptor.aes.EyePacsEncryptorAES;

public class UploadResult {
	private static TitledPane patientDetailsPane;
	private TitledPane medicalDetailsPane;
	private static TitledPane uploadTitledPane;
	private VBox vboxforaccordianandLabel;
	private VBox vboxforPateintLabel;
	private VBox vboxForMainContent;
	private ScrollPane scrollPane;
	private StackPane uploadStackPane;
	private Label previouslyClickedLabel = null;
	private ImageView validaionimageView;
	private ImageView uploadImageView;
	private ImageView medicalImageView;
	private Rectangle previouslyClickedRectangle;
	private String userName;
	private String userPassword;
	private PersonalDetails personalDetaails;

	public void displayUpload(Stage stage, BorderPane borderPane, String result, Pane fixedRectangleStackPane,
			String username, String password) throws FileNotFoundException {
		this.userName = username;
		this.userPassword = password;
		uploadStackPane = new StackPane();
		Label queueLabel = new Label("Queue");
		queueLabel.setStyle("-fx-font-weight: bold; -fx-font-size: 16px");
		ImageView imageViewRefresh = new ImageView(new Image(new FileInputStream("resources/images/Refresh.png")));
		imageViewRefresh.setFitHeight(13);
		imageViewRefresh.setFitWidth(13);
		Button btn = new Button();
		btn.setStyle("-fx-background-color: transparent; -fx-border-color: transparent;");
		btn.setGraphic(imageViewRefresh);
		// Create a colored circle for the background of the "+"
		Circle refreshCircle = new Circle(10, Color.ORANGE);
		StackPane refreshStackPane = new StackPane();
		refreshStackPane.getChildren().addAll(refreshCircle, btn);
		// button
		Button btnForAddPatient = new Button();
		StackPane plusStackPane = Utilty.addPatientCalled(btnForAddPatient, stage);
		plusStackPane.setPadding(new Insets(0, 0, 0, 115));
		HBox hbox = new HBox(queueLabel, refreshStackPane);
		hbox.setSpacing(110);
		scrollPane = new ScrollPane();
		// scrollPane.setStyle("-fx-background-color:white; !important");
		vboxforPateintLabel = new VBox(30);
		vboxforPateintLabel.setStyle("-fx-background-color: white;");
		HBox hboxforsearchTextFieldandImage = new HBox();
		Image searchImageTextBox = new Image(new FileInputStream("resources/images/search.png"));
		ImageView searchImageView = new ImageView(searchImageTextBox);
		searchImageView.setFitWidth(10);
		searchImageView.setFitHeight(10);
		Button btnContaingSearch = new Button();
		btnContaingSearch.setGraphic(searchImageView);
		btnContaingSearch.setStyle("-fx-background-color: transparent; -fx-border-color: transparent;");
		TextField searchTextField = new TextField();
		searchTextField.setPromptText("Search");
		// making the width of searchtextField to 0 px
		searchTextField.setStyle("-fx-background-color: transparent; -fx-border-width: 0 0 0 0; ");
		hboxforsearchTextFieldandImage.setStyle("-fx-border-radius: 2;" + "-fx-border-color: black;");
		hboxforsearchTextFieldandImage.getChildren().addAll(searchTextField, btnContaingSearch);
		btnContaingSearch.setOnAction(e -> {
			String searchText = searchTextField.getText().trim();
			if (searchText.isEmpty()) {
				// If search text is empty, add the original vbox to the scroll pane
				scrollPane.setContent(vboxforPateintLabel);
				// return; // Exit the event handler
			} else {
				// boolean matchFound = false;
				for (Node node : vboxforPateintLabel.getChildren()) {
					if (node instanceof Label) {
						Label label = (Label) node;
						if (label.getText().contains(searchText)) { // Use contains() instead of equals() if partial
																	// matches are allowed
							// Remove the existing content from the scroll pane
							// scrollPane.setContent(null);
							// Set the label as the content of the scroll pane
							scrollPane.setContent(label);
							// matchFound = true;
							break; // Exit the loop since we found a match
						}
					}
				}
//				if (!matchFound) {
//					// Reset the content of the scroll pane to the original vbox
//					scrollPane.setContent(vboxforPateintLabel);
//
//				}
			}
		});

		/*
		 * textProperty() of the searchTextField. In JavaFX, many properties of UI
		 * elements are observable, meaning you can register listeners to be notified
		 * when their values change. The textProperty() of a TextField represents its
		 * current text content.
		 */
		searchTextField.textProperty().addListener((observable, oldValue, newValue) -> {
			if (newValue.isEmpty()) {
				// If search text is cleared, restore the original vbox inside the scroll pane
				scrollPane.setContent(vboxforPateintLabel);
			}
		});
		HBox hboxForPatientFiltering = new HBox();
		Button btnForThisMonth = new Button("Show Today's");
		btnForThisMonth.setStyle(
				"-fx-background-color: transparent; -fx-border-width: 0 0 0 0; -fx-border-radius:0; -fx-background-radius: 0");
		Button btnForAllTime = new Button("All Patients");
		// btnForAllTime.setPadding(new Insets(0,15,0,0));
		btnForAllTime.setStyle(
				"-fx-background-color: transparent; -fx-border-width: 0 0 0 0; -fx-background-radius: 0;-fx-border-radius:0;");
		hboxForPatientFiltering.getChildren().addAll(btnForThisMonth, btnForAllTime);
		hboxForPatientFiltering.setMaxWidth(200);
		btnForThisMonth.setOnAction(e -> {
			btnForThisMonth.setStyle("-fx-background-color: orange;-fx-border-radius:0;-fx-font-weight: bold;");
			btnForAllTime.setStyle("-fx-background-color:lightgrey;-fx-font-weight: bold;");
			updatePatientList("today");

		});

		btnForAllTime.setOnAction(e -> {
			btnForAllTime.setStyle("-fx-background-color: orange;-fx-border-radius:5;-fx-font-weight: bold;");
			btnForThisMonth.setStyle("-fx-background-color:lightgrey;-fx-font-weight: bold;");
			// Call the API to fetch all patients
			System.out.println(fetchPatients("all"));
			updatePatientList("all");
		});
		// by default click the all time button
		btnForAllTime.fire();
		hbox.setMaxWidth(200);
		hboxforsearchTextFieldandImage.setMaxWidth(200);
		vboxForMainContent = new VBox(hbox, hboxforsearchTextFieldandImage, hboxForPatientFiltering, scrollPane,
				plusStackPane);
		vboxForMainContent.setBorder(new Border(
				new BorderStroke(Color.LIGHTGRAY, BorderStrokeStyle.SOLID, new CornerRadii(5), new BorderWidths(.7))));

		vboxForMainContent.setStyle("-fx-background-color:white");
		vboxForMainContent.setPadding(new Insets(20));
		vboxForMainContent.setPrefSize(250, 500);
		vboxForMainContent.setSpacing(30);
		uploadStackPane.getChildren().add(vboxForMainContent);
		StackPane.setMargin(vboxForMainContent, new Insets(10));
		vboxforaccordianandLabel = new VBox();
		vboxforaccordianandLabel.setStyle("-fx-background-color:white");
		vboxforaccordianandLabel.setPadding(new Insets(20, 0, 0, 0));
		vboxForMainContent.setStyle("-fx-background-color:white");
		vboxforaccordianandLabel.setPrefSize(750, 550);
		Label lablelforSelectingpatient = new Label();
		lablelforSelectingpatient.setPadding(new Insets(250, 0, 0, 300));
		lablelforSelectingpatient.setText("Select a patient from the Queue to Continue");
		vboxforaccordianandLabel.getChildren().add(lablelforSelectingpatient);
		vboxforaccordianandLabel.setBorder(new Border(
				new BorderStroke(Color.LIGHTGRAY, BorderStrokeStyle.SOLID, new CornerRadii(5), new BorderWidths(.7))));
		StackPane stackPaneforLabelAndAccordiaon = new StackPane();
		stackPaneforLabelAndAccordiaon.getChildren().add(vboxforaccordianandLabel);
		vboxforaccordianandLabel.setPadding(new Insets(10));
		stackPaneforLabelAndAccordiaon.setPadding(new Insets(10));
		HBox hboxForPatientandAccordian = new HBox(15);
		hboxForPatientandAccordian.getChildren().addAll(uploadStackPane, stackPaneforLabelAndAccordiaon);
		fixedRectangleStackPane.getChildren().clear();
		fixedRectangleStackPane.getChildren().add(hboxForPatientandAccordian);
	}

	/**
	 * 
	 * @param name
	 * @return Hox containing rectagle indicator and name label
	 */
	public HBox labelForPatient(String name, String patientId) {
		// Create a label for the patient's name
		Label label = new Label(name);

		// Create a rectangle to indicate the selection
		Rectangle selectionIndicator = new Rectangle(10, 25); // Width 10, Height 25
		selectionIndicator.setFill(Color.TRANSPARENT); // Initially transparent

		// Create an HBox to hold both the label and the rectangle
		HBox labelContainer = new HBox(5); // Spacing of 5 pixels between label and rectangle
		labelContainer.setAlignment(Pos.CENTER_LEFT);
		labelContainer.getChildren().addAll(selectionIndicator, label);

		label.setOnMouseClicked(e -> {
			if (previouslyClickedLabel != null) {
				previouslyClickedLabel.setTextFill(Color.BLACK); // Assuming black is the original color
				// Hide the rectangle of the previously clicked patient
				previouslyClickedRectangle.setFill(Color.TRANSPARENT);
			}

			// Update the label color and rectangle for the currently clicked patient
			label.setTextFill(Color.ORANGE);
			selectionIndicator.setFill(Color.ORANGE); // Set the rectangle color to orange

			// Clear the VBox and add the new content
			vboxforaccordianandLabel.getChildren().clear();

			// Fetch patient details from the API based on patientId
			Map<HttpsConnectors.RESPONSE, String> response = getPatientDetails(patientId);
			// Map<HttpsConnectors.RESPONSE, String> medicalRespose=getMedicalRecord();
			System.out.println(response);
			// System.out.println(medicalRespose);
			System.out.println(patientId);
			if ("200".equals(response.get(HttpsConnectors.RESPONSE.CODE))) {
				String responseBody = response.get(HttpsConnectors.RESPONSE.VALUE);
				System.out.println(responseBody);
				if (responseBody != null) {
					try {
						JsonObject jsonObject = JsonParser.parseString(responseBody).getAsJsonObject();
						String patientName = jsonObject.get("patientName").getAsString();
						String medicalRecordNumber = jsonObject.get("medicalRecordNumber").getAsString();
						String ethnicity = jsonObject.get("ethnicity").getAsString();
						String phone = jsonObject.get("phone").getAsString();
						String email = jsonObject.get("email").getAsString();
						String gender = jsonObject.get("gender").getAsString();
						String birthMonth = jsonObject.get("birthMonth").getAsString();
						String birthDay = jsonObject.get("birthDay").getAsString();
						String birthYear = jsonObject.get("birthYear").getAsString();
						String caseId = jsonObject.get("caseId").getAsString();
						vboxforaccordianandLabel.getChildren().add(createAccordion(patientName, medicalRecordNumber,
								ethnicity, phone, email, gender, birthDay, birthMonth, birthYear, caseId));

					} catch (Exception ex) {
						ex.printStackTrace();
					}
				}
			} else {
				System.out.println("Failed to retrieve patient details. Response Code: "
						+ response.get(HttpsConnectors.RESPONSE.CODE));
			}

			// Update the previously clicked label and rectangle references
			previouslyClickedLabel = label;
			previouslyClickedRectangle = selectionIndicator;

			Platform.runLater(() -> {
				patientDetailsPane.setExpanded(true);
			});
		});

		return labelContainer; // Return the HBox containing the label and rectangle
	}

	/**
	 * 
	 * @param birthYear
	 * @param birthMonth
	 * @param birthDay
	 * @param gender
	 * @param email
	 * @param phone
	 * @param ethnicity
	 * @param medicalRecordNumber
	 * @param patientName
	 * @param name
	 * @return
	 * @throws FileNotFoundException
	 */
	public Accordion createAccordion(String patientName, String medicalRecordNumber, String ethnicity, String phone,
			String email, String gender, String birthDay, String birthMonth, String birthYear, String caseId)
			throws FileNotFoundException {
		Accordion accordion = new Accordion();
		accordion.setStyle("-fx-background-color:#ffffff !important;");
		Image icon = new Image(new FileInputStream("resources/images/validationImage.png")); // Update the path to your
		validaionimageView = new ImageView(icon);
		validaionimageView.setFitHeight(20); // Set desired height
		validaionimageView.setFitWidth(20); // Set desired width
		Label titleLabel = new Label("Patient Details");
		titleLabel.setStyle("-fx-font-weight: bold; -fx-font-size: 12px;-fx-font-family: 'Arial';");
		HBox header = new HBox(600, titleLabel, validaionimageView);
		header.setPadding(new Insets(7));
		header.setAlignment(Pos.CENTER_LEFT);
		header.setStyle("-fx-background-color:#ffffff;");
		validaionimageView.setVisible(false);
		patientDetailsPane = new TitledPane();
		patientDetailsPane.setGraphic(header); // Set custom header
		patientDetailsPane.setStyle("-fx-background-color: white; -fx-text-fill: black;");
		patientDetailsPane.setContent(createPatientDetailsForm(patientName, medicalRecordNumber, ethnicity, phone,
				email, gender, birthDay, birthMonth, birthYear));
		uploadTitledPane = new TitledPane();
		Label uploadLabel = new Label("Upload");
		uploadLabel.setStyle("-fx-font-weight: bold; -fx-font-size: 12px;-fx-font-family: 'Arial';");
		Image iconForUpload = new Image(new FileInputStream("resources/images/validationImage.png"));
		uploadImageView = new ImageView(iconForUpload);
		uploadImageView.setFitHeight(20); // Set desired height
		uploadImageView.setFitWidth(20); // Set desired width
		HBox uploadLabelHbOx = new HBox(645, uploadLabel, uploadImageView);
		uploadLabelHbOx.setPadding(new Insets(7));
		uploadLabelHbOx.setStyle("-fx-background-color:#ffffff;");
		header.setAlignment(Pos.CENTER_LEFT);
		uploadImageView.setVisible(false);
		uploadTitledPane.setGraphic(uploadLabelHbOx); // Set custom header
		UploadImages uploadImage = new UploadImages();
		uploadTitledPane.setContent(uploadImage.createUpload());
		medicalDetailsPane = new TitledPane();
		Image iconFormedicalRecord = new Image(new FileInputStream("resources/images/validationImage.png"));
		medicalImageView = new ImageView(iconFormedicalRecord);
		medicalImageView.setFitHeight(20); // Set desired height
		medicalImageView.setFitWidth(20); // Set desired width
		Label medicalDetailLabel = new Label("Medical Details");
		medicalDetailLabel.setStyle("-fx-font-weight: bold; -fx-font-size: 12px;-fx-font-family: 'Arial';");
		HBox medicalDetailsHBox = new HBox(600, medicalDetailLabel, medicalImageView);
		medicalDetailsHBox.setStyle("-fx-background-color:#ffffff;");
		medicalImageView.setVisible(false);
		medicalDetailsHBox.setPadding(new Insets(7));
		medicalDetailsHBox.setAlignment(Pos.CENTER_LEFT);
		medicalDetailsPane.setGraphic(medicalDetailsHBox); // Set custom header
		// gettin gthe medical response
		Map<RESPONSE, String> medicalResponse = getMedicalRecord(caseId);
		System.out.println("redical respnse is " + medicalResponse);
		// if ("200".equals(medicalResponse.get(HttpsConnectors.RESPONSE.CODE))) {
		String responseBody = medicalResponse.get(HttpsConnectors.RESPONSE.VALUE);
		System.out.println("medical response body is:" + responseBody);
		System.out.println(responseBody);
//			if (responseBody != null) {
//				try {
		JsonObject jsonObject = JsonParser.parseString(responseBody).getAsJsonObject();

		// Extracting fields from the VALUE object
		// Safely extract the "caseId" field
		String caseId1 = jsonObject.get("caseId").isJsonNull() ? null : jsonObject.get("caseId").getAsString();
		System.out.println("Case ID: " + caseId1);

		// Safely extract the "medications" field
		/*
		 * Handling null Values: If the element is JsonNull, it assigns null to the
		 * corresponding variable; otherwise, it converts the value to a String using
		 * getAsString().
		 */
		String medications = jsonObject.get("medications").isJsonNull() ? null
				: jsonObject.get("medications").getAsString();
		System.out.println("Medication is " + medications);

		// Safely extract the "hypertension" field
		String hypertension = jsonObject.get("hypertension").isJsonNull() ? null
				: jsonObject.get("hypertension").getAsString();
		System.out.println("Hypertension is " + hypertension);

		// Safely extract the "otherHistory" field
		String otherHistory = jsonObject.get("otherHistory").isJsonNull() ? null
				: jsonObject.get("otherHistory").getAsString();
		System.out.println("Other history is " + otherHistory);

		// Safely extract the "hemoglobin" field
		String hemoglobin = jsonObject.get("hemoglobin").isJsonNull() ? null
				: jsonObject.get("hemoglobin").getAsString();
		System.out.println("Hemoglobin is " + hemoglobin);
				String bloodYearMonth = jsonObject.get("bloodDrawMonth").isJsonNull() ? null
						: jsonObject.get("bloodDrawMonth").getAsString();
				String bloodYear = jsonObject.get("bloodDrawYear").isJsonNull() ? null
						: jsonObject.get("bloodDrawYear").getAsString();
				String cholestrol = jsonObject.get("cholestrol").isJsonNull() ? null
						: jsonObject.get("cholestrol").getAsString();
				String triglycerides = jsonObject.get("triglycerides").isJsonNull() ? null
						: jsonObject.get("triglycerides").getAsString();
				String subjectiveDiabeticControl = jsonObject.get("subjectiveDiabeticControl").isJsonNull() ? null
						: jsonObject.get("subjectiveDiabeticControl").getAsString();
				
				String yearsWithDiabeties = jsonObject.get("yearsWithDiabeties").isJsonNull() ? null
						: jsonObject.get("yearsWithDiabeties").getAsString();
				String insulinDependent = jsonObject.get("insulinDependent").isJsonNull() ? null
						: jsonObject.get("insulinDependent").getAsString();
				String reasonRetinalConsult = jsonObject.get("reasonRetinalConsult").isJsonNull() ? null
						: jsonObject.get("reasonRetinalConsult").getAsString();
				String duration = jsonObject.get("duration").isJsonNull() ? null
						: jsonObject.get("duration").getAsString();
				String lastEyeExam= jsonObject.get("lastEyeExam").isJsonNull() ? null
						: jsonObject.get("lastEyeExam").getAsString();
				String glaucomaHistory= jsonObject.get("glaucomaHistory").isJsonNull() ? null
						: jsonObject.get("glaucomaHistory").getAsString();
				String pregnant= jsonObject.get("pregnant").isJsonNull() ? null
						: jsonObject.get("pregnant").getAsString();
				String visualAcuityRight= jsonObject.get("visualAcuityRight").isJsonNull() ? null
						: jsonObject.get("visualAcuityRight").getAsString();
				String pinhole= jsonObject.get("pinhole").isJsonNull() ? null
						: jsonObject.get("pinhole").getAsString();
				String withRx= jsonObject.get("withRx").isJsonNull() ? null
						: jsonObject.get("withRx").getAsString();
				String iopRight= jsonObject.get("iopRight").isJsonNull() ? null
						: jsonObject.get("iopRight").getAsString();
				String iopLeft= jsonObject.get("iopLeft").isJsonNull() ? null
						: jsonObject.get("iopLeft").getAsString();
				String pupilDilation= jsonObject.get("pupilDilation").isJsonNull() ? null
						: jsonObject.get("pupilDilation").getAsString();
				String bloodSugarLevelHigh= jsonObject.get("bloodSugarLevelHigh").isJsonNull() ? null
						: jsonObject.get("bloodSugarLevelHigh").getAsString();
				String bloodSugarLevelLow= jsonObject.get("bloodSugarLevelLow").isJsonNull() ? null
						: jsonObject.get("bloodSugarLevelLow").getAsString();
				String bloodSugarLevelAvg= jsonObject.get("bloodSugarLevelAvg").isJsonNull() ? null
						: jsonObject.get("bloodSugarLevelAvg").getAsString();
				
				
				
		medicalDetailsPane.setContent(showMedicalDetailsForm(medications, hypertension, otherHistory, hemoglobin,bloodYearMonth,bloodYear,cholestrol,triglycerides,pupilDilation,bloodSugarLevelAvg,bloodSugarLevelHigh,bloodSugarLevelLow,iopLeft,iopRight,visualAcuityRight,glaucomaHistory,reasonRetinalConsult,insulinDependent,yearsWithDiabeties,duration,lastEyeExam,subjectiveDiabeticControl,pregnant));
		accordion.getPanes().addAll(patientDetailsPane, uploadTitledPane, medicalDetailsPane);
		uploadTitledPane.setStyle("-fx-background-color:#ffffff");
		patientDetailsPane.expandedProperty().addListener((observable, oldValue, newValue) -> {
			if (newValue) {
				// TitledPane is expanded
				titleLabel.setTextFill(Color.web("#424242")); // Darker grey
			} else {
				// TitledPane is collapsed
				titleLabel.setTextFill(Color.web("#9E9E9E")); // Lighter grey
			}
		});
		medicalDetailsPane.expandedProperty().addListener((observable, oldValue, newValue) -> {
			if (newValue) {
				medicalDetailLabel.setTextFill(Color.web("#424242")); // Darker grey

			} else {
				// TitledPane is collapsed
				medicalDetailLabel.setTextFill(Color.web("#9E9E9E")); // Lighter grey
			}
		});
		uploadTitledPane.expandedProperty().addListener((observable, oldValue, newValue) -> {
			if (newValue) {
				// TitledPane is expanded
				uploadLabel.setTextFill(Color.web("#424242")); // Darker grey
			} else {
				// TitledPane is collapsed
				uploadLabel.setTextFill(Color.web("#9E9E9E")); // Lighter grey
				uploadImageView.setVisible(uploadImage.getImageCount() != 0);
			}
		});

		for (TitledPane pane : accordion.getPanes()) {
			pane.setStyle("-fx-background-color:#ffffff !important;-fx-background:white;");
			// Set the background color for the content inside each TitledPane
			pane.getContent().setStyle("-fx-background-color:#ffffff !important;-fx-background:white;");
		}

		return accordion;
	}

	/***
	 * creating a form
	 * 
	 * @param birthYear
	 * @param birthMonth
	 * @param birthDay
	 * @param gender
	 * @param email
	 * @param phone
	 * @param ethnicity
	 * @param medicalRecordNumber
	 * @param patientName
	 * 
	 * @return Grid pane
	 */
	private VBox createPatientDetailsForm(String patientName, String medicalRecordNumber, String ethnicity,
			String phone, String email, String gender, String birthDay, String birthMonth, String birthYear) {
		VBox personalDetailsVBox = new VBox(3);
		personalDetaails = new PersonalDetails();
		GridPane personalGridPane = personalDetaails.personalGridForUpload(patientName, medicalRecordNumber, ethnicity,
				phone, email, gender, birthDay, birthMonth, birthYear);
		//// ADDING SUBMIT BUTTON
		VBox vboxContinueButton = new VBox();
		Button uploadButton = new Button("CONTINUE");
		vboxContinueButton.getChildren().add(uploadButton);
		vboxContinueButton.setAlignment(Pos.CENTER);
		uploadButton.setPrefSize(550, 30);
		uploadButton.setStyle("-fx-background-color: orange; " + // Set the background color to orange
				"-fx-text-fill: white; " + // Set the text color to white
				"-fx-font-weight: bold; " + // Set the font weight to bold
				" -fx-border-radius: 10px;" + "-fx-background-radius: 10px;" // Set the border radius (adjust the value
																				// as needed)
		);

		// Set up the button action and validation
		setupContinueButton(uploadButton, personalDetaails);
		personalDetailsVBox.getChildren().addAll(personalGridPane, vboxContinueButton);
		return personalDetailsVBox;
	}

	/**
	 * creating medical record form
	 * 
	 * @param hemoglobin
	 * @param otherHistory
	 * @param hypertension
	 * @param medications
	 * @param bloodYear 
	 * @param bloodYearMonth 
	 * @param yearsWithDiabeties 
	 * @param insulinDependent 
	 * @param reasonRetinalConsult 
	 * @param glaucomaHistory 
	 * @param visualAcuityRight 
	 * @param iopRight 
	 * @param iopLeft 
	 * @param bloodSugarLevelLow 
	 * @param bloodSugarLevelHigh 
	 * @param bloodSugarLevelAvg 
	 * @param pupilDilation 
	 * @param triglycerides 
	 * @param cholestrol 
	 * @param lastEyeExam 
	 * @param duration 
	 * @param pregnant 
	 * @param subjectiveDiabeticControl 
	 * 
	 * @return gridpane
	 */

	private ScrollPane showMedicalDetailsForm(String medications, String hypertension, String otherHistory,
			String hemoglobin, String bloodYearMonth, String bloodYear, String cholestrol, String triglycerides, String pupilDilation, String bloodSugarLevelAvg, String bloodSugarLevelHigh, String bloodSugarLevelLow, String iopLeft, String iopRight, String visualAcuityRight, String glaucomaHistory, String reasonRetinalConsult, String insulinDependent, String yearsWithDiabeties, String duration, String lastEyeExam, String subjectiveDiabeticControl, String pregnant) {
		
		MedicalDetails medicalDetails = new MedicalDetails();
		GridPane v1 = medicalDetails.medicalRecordGRidPane(personalDetaails, medications, hypertension, otherHistory,
				hemoglobin,bloodYearMonth,bloodYear,cholestrol,triglycerides,pupilDilation,bloodSugarLevelAvg,bloodSugarLevelHigh,bloodSugarLevelLow,iopLeft,iopRight,visualAcuityRight,glaucomaHistory,reasonRetinalConsult,insulinDependent,duration,yearsWithDiabeties,lastEyeExam,subjectiveDiabeticControl,pregnant);
		VBox medVbox = new VBox();
		Button submitButton = new Button("SUBMIT");
		submitButton.setPrefSize(500, 35);
		submitButton.setStyle("-fx-background-color: orange; " + // Set the background color to orange
				"-fx-text-fill: white; " + // Set the text color to white
				"-fx-font-weight: bold; " + // Set the font weight to bold
				"-fx-border-radius: 10;" + "-fx-background-radius:10;" // Set the border radius (adjust the value as
																		// needed)
		);
		submitButton.setOnAction(e -> {

			boolean medidicalDetilsValid = handleSubmit(medicalDetails);
			if (medidicalDetilsValid) {
				medicalImageView.setVisible(true);
			}
		});
		GridPane.setColumnSpan(submitButton, 2);
		medVbox.getChildren().addAll(v1, submitButton);
		medVbox.setSpacing(5);

		ScrollPane medicalScpane = new ScrollPane(medVbox);

		return medicalScpane;
	}

	private boolean handleSubmit(MedicalDetails medicalDetails) {

		if (medicalDetails.validateMedicalField()) {
			return true;
		}
		return false;

	}

	public void setupContinueButton(Button uploadButton, PersonalDetails personalDetaails) {
		uploadButton.setOnAction(event -> {
			System.out.println("name value is " + Utilty.getNameTextField());
			System.out.println("mrn value is" + Utilty.getMrnTextField());

			if (personalDetaails.validateFormFields()) {
				validaionimageView.setVisible(true);
				patientDetailsPane.setExpanded(false); // Assuming patientDetailsPane is defined elsewhere
				uploadTitledPane.setExpanded(true); // Assuming uploadTitledPane is defined elsewhere
			}

		});
	}

	public Map<RESPONSE, String> fetchPatients(String fetchValue)

	{
		Login l1 = new Login();
		String credString = new EyePacsEncryptorAES().encryptEyePacsCredentials(userName, userPassword);
		Map<String, String> value = l1.getSiteMap();
		// get siteid based on value
		String siteId = value.get(l1.getSiteComboBox().getValue());
		String apiUrl = "/uploader/patient/list/" + siteId;
		HttpsConnectors connector = new HttpsConnectors(HttpsConnectors.SERVER.LOCALHOST, apiUrl,
				HttpsConnectors.METHOD.POST);
		Map<HttpsConnectors.RESPONSE, String> response = connector.apiConnect(fetchValue, credString, "text/plain",
				"application/json");
		return response;
	}

	public ScrollPane getTodayPatientRecord() {

		return scrollPane;

	}

	/**
	 * get patirnt details based on on the patient id
	 * 
	 * @param patientId
	 * @return Map containg response and response body
	 */
	public Map<RESPONSE, String> getPatientDetails(String patientId)

	{
		System.out.println("getPatientDetails method called");
		Login l1 = new Login();
		System.out.println(patientId);
		String credString = new EyePacsEncryptorAES().encryptEyePacsCredentials(userName, userPassword);
		Map<String, String> value = l1.getSiteMap();
		String siteId = value.get(l1.getSiteComboBox().getValue());
		System.out.println(siteId);
		String apiUrl = "/uploader/patient/id/" + siteId + "/" + patientId;
		System.out.println(patientId);
		HttpsConnectors connector = new HttpsConnectors(HttpsConnectors.SERVER.LOCALHOST, apiUrl,
				HttpsConnectors.METHOD.POST);
		Map<HttpsConnectors.RESPONSE, String> response = connector.apiConnect("", credString, "text/plain",
				"application/json");
		return response;
	}

	/*
	 * based on the condion update the vboxforPateintLabel based on condion
	 */
	private void updatePatientList(String filter) {
		// System.out.println(getMedicalRecord(id));
		// Clear the existing labels
		vboxforPateintLabel.getChildren().clear();

		// Fetch the patient data based on the selected filter
		Map<HttpsConnectors.RESPONSE, String> response = fetchPatients(filter);
		System.out.println(response);

		if (response.get(HttpsConnectors.RESPONSE.CODE).equals("200")) {
			String responseBody = response.get(HttpsConnectors.RESPONSE.VALUE);
			System.out.println(responseBody);
			if (responseBody != null) {
				try {
					// Parse the JSON response
					JsonObject jsonObject = JsonParser.parseString(responseBody).getAsJsonObject();

					// Iterate over the entries in the JSON object
					for (Map.Entry<String, JsonElement> entry : jsonObject.entrySet()) {
						String patientId = entry.getKey(); // Get the patient ID
						String patientName = entry.getValue().getAsString(); // Get the patient name
						// Create a label for each patient
						HBox patientLabel = labelForPatient(patientName, patientId);
						// Add the patient label to the VBox
						vboxforPateintLabel.getChildren().add(patientLabel);
					}
					scrollPane.setContent(vboxforPateintLabel);
					scrollPane.setStyle("-fx-background-color: white; -fx-background: white;"); // Ensure ScrollPane
																								// background is white

				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				System.out.println("Response body is null.");
			}
		} else {
			System.out
					.println("Failed to retrieve data. Response Code: " + response.get(HttpsConnectors.RESPONSE.CODE));
		}
	}

	/**
	 * 
	 * @return Map of response and response body
	 */
	public Map<RESPONSE, String> getMedicalRecord(String caseId) {

		// String caseId = "300324";

		// Construct the API URL with the dynamic siteId
		String apiUrl = "/uploader/patient/case/" + caseId;
		String credString = new EyePacsEncryptorAES().encryptEyePacsCredentials(userName, userPassword);
		HttpsConnectors connector = new HttpsConnectors(HttpsConnectors.SERVER.LOCALHOST, apiUrl,
				HttpsConnectors.METHOD.POST);
		Map<HttpsConnectors.RESPONSE, String> response = connector.apiConnect("", credString, "text/plain",
				"application/json");
		return response;
	}

}
