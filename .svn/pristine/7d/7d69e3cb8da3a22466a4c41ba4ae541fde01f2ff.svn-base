package com.autouploader;

import javafx.animation.PauseTransition;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Point2D;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.stage.Screen;
import javafx.stage.Stage;
import javafx.util.Duration;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;
import com.eyepacs.ext.connectors.https.HttpsConnectors;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.reflect.TypeToken;

import ext.eyepacs.encryptor.aes.EyePacsEncryptorAES;

public class PatientsResult {
	private VBox patientResultVBox;
	private ObservableList<Patient> patientData;
	private Rectangle searchThisWeekRectagle;
	private Rectangle searchThisMonthRecatangle;
	private Rectangle searchLastThreeMonthRectagle;
	private Rectangle searchAllTimeMonthRectangle;
	private StackPane dispalyPatientResultStackpane;
	private Stage stage;
	private String userName;
	private String pass;
	private ComboBox<String> siteComboBox;
	private DateTimeFormatter dateFormatter;
	private TableView<Patient> patientTableview;
	private TextField searchTextField;
	private ImageView refreshImageView;

	public void displayPatientResult(Stage stage, BorderPane borderPane, String result, Pane fixedRectangleStackPane,
			ComboBox<String> sitecomboBox, String username, String password) throws FileNotFoundException {

		this.stage = stage;
		this.pass = password;
		this.userName = username;
		this.siteComboBox = sitecomboBox;
		System.out.println(getLastThreeMonthDate());
		System.out.println(getThisMonthDate());
		System.out.println(getLastWeekDate());
		System.out.println(getPatientsThisMonth(username, password));
		dispalyPatientResultStackpane = new StackPane();
		Screen screeen = Screen.getPrimary();
		dispalyPatientResultStackpane.setPrefWidth(screeen.getVisualBounds().getWidth() * .80);

		// this vbox for all content
		patientResultVBox = new VBox(20);
		patientResultVBox.setPadding(new Insets(35));
		patientResultVBox.setBorder(new Border(
				new BorderStroke(Color.LIGHTGRAY, BorderStrokeStyle.SOLID, new CornerRadii(5), new BorderWidths(.7))));
		HBox labelAndImage = new HBox(16);
		Label label = new Label("Patients List");
		label.setFont(Font.font("Arial", FontWeight.BOLD, 20));
		Image scrollingImage = new Image(new FileInputStream("resources/images/Refresh.png"));
		ImageView scrollingImageView = new ImageView(scrollingImage);
		scrollingImageView.setFitWidth(16);
		scrollingImageView.setFitHeight(16);
		Button refreshbtn = new Button();
		refreshbtn.setGraphic(scrollingImageView);
		refreshbtn.setStyle("-fx-background-color:transparent; -fx-border-color:transparent;");
		// Set the size for the circle
		double circleSize = 28.0;
		// Create a Circle with orange background
		Circle orangeBackground = new Circle(circleSize / 2, Color.ORANGE);
		// Create a StackPane and add the Rectangle and ImageView
		StackPane stackPane = new StackPane();
		stackPane.getChildren().addAll(orangeBackground, refreshbtn);

		// Set action to the buttton when clicked
//		refreshbtn.setOnAction(e -> {
//			refreshImageView.setVisible(true);
//			refreshImageView.setManaged(true);
//			PauseTransition pause=new PauseTransition();
//			pause.setDelay(Duration.millis(100));
//			pause.setOnFinished(event->{
//			patientResultVBox.getChildren().set(1,refreshImageView);
//			System.out.println("tabke is refresh with new data:");
//			try {
//				TableView<Patient> refreshedTable=refreshTable();
//				patientResultVBox.getChildren().set(1,refreshedTable);
//				System.out.println("table is refreshed with"+refreshedTable);
//			} catch (FileNotFoundException e1) {
//				// TODO Auto-generated catch block
//				e1.printStackTrace();
//			}
//			refreshImageView.setVisible(false);
//			refreshImageView.setManaged(false);
//			System.out.println("tabke is refreshed with new tanle");
//			});
//			pause.play();
//
//		});
		refreshbtn.setOnAction(e -> {
		    // Show the loading gif (refreshImageView)
		    refreshImageView.setVisible(true);
		    refreshImageView.setManaged(true);

		    // Add the refreshImageView to the VBox at index 1
		    patientResultVBox.getChildren().set(1, refreshImageView);

		    // Create a PauseTransition to simulate a delay
		  //  PauseTransition pause = new PauseTransition(Duration.millis(300));  // 100ms delay

		    // When the pause finishes, refresh the table data
		  //  pause.setOnFinished(event -> {
		        System.out.println("Table is being refreshed with new data");

		        try {
		            // Refresh the TableView with new data
		            TableView<Patient> refreshedTable = refreshTable();

		            // Replace the loading gif with the new TableView
		            patientResultVBox.getChildren().set(1, refreshedTable);
		            System.out.println("Table is refreshed with: " + refreshedTable);

		        } catch (FileNotFoundException e1) {
		            e1.printStackTrace();
		        }

		        // Hide the loading gif after the table is updated
		        refreshImageView.setVisible(false);
		        refreshImageView.setManaged(false);
		        System.out.println("Table is refreshed with the new data");
		  //  });

		    // Start the pause transition
		  //  pause.play();
		});


// adding label and imageview in hbox
		labelAndImage.getChildren().addAll(label, stackPane);
		Button searchThisWeekButton = new Button("This Week");
		searchThisWeekRectagle = new Rectangle();
		searchThisWeekRectagle.setHeight(3);
		searchThisWeekRectagle.setWidth(60);
		VBox vboxContaingButtonAndRectagle = new VBox();
		vboxContaingButtonAndRectagle.setAlignment(Pos.CENTER);
		vboxContaingButtonAndRectagle.getChildren().addAll(searchThisWeekButton, searchThisWeekRectagle);
		searchThisWeekRectagle.setFill(Color.WHITE);
		searchThisWeekButton.setStyle("-fx-background-color:transparent; -fx-border-color:transparent;");

		Button searchThisMonthButton = new Button("This Month");
		VBox vboxContainingThisMonthButtonAndRectangle = new VBox();
		searchThisMonthRecatangle = new Rectangle();
		searchThisMonthRecatangle.setFill(Color.WHITE);
		searchThisMonthRecatangle.setHeight(3);
		searchThisMonthRecatangle.setWidth(60);
		vboxContainingThisMonthButtonAndRectangle.setAlignment(Pos.CENTER);

		vboxContainingThisMonthButtonAndRectangle.getChildren().addAll(searchThisMonthButton,
				searchThisMonthRecatangle);

		searchThisMonthButton.setStyle("-fx-background-color: transparent; -fx-border-color: transparent;");
		/// Action for This Month button

		Button searchLast3MonthButton = new Button("Last 3 Month");
		VBox vboxContainingThisThreeMonthButtonAndRectangle = new VBox();
		searchLastThreeMonthRectagle = new Rectangle();
		searchLastThreeMonthRectagle.setFill(Color.WHITE);
		searchLastThreeMonthRectagle.setHeight(3);
		searchLastThreeMonthRectagle.setWidth(70);
		vboxContainingThisThreeMonthButtonAndRectangle.setAlignment(Pos.CENTER);

		vboxContainingThisThreeMonthButtonAndRectangle.getChildren().addAll(searchLast3MonthButton,
				searchLastThreeMonthRectagle);

		searchLast3MonthButton.setStyle("-fx-background-color: transparent; -fx-border-color: transparent;");
		// Action for Last 3 Months button

		Button searchButtonFor6Month = new Button("Last 6 Months");
		VBox vboxContainingAllTimeButtonAndRectangle = new VBox();
		searchAllTimeMonthRectangle = new Rectangle();
		searchAllTimeMonthRectangle.setFill(Color.WHITE);
		searchAllTimeMonthRectangle.setHeight(3);
		searchAllTimeMonthRectangle.setWidth(44);
		vboxContainingAllTimeButtonAndRectangle.setAlignment(Pos.CENTER);

		vboxContainingAllTimeButtonAndRectangle.getChildren().addAll(searchButtonFor6Month,
				searchAllTimeMonthRectangle);

		searchButtonFor6Month.setStyle("-fx-background-color: transparent; -fx-border-color: transparent;");

		HBox hboxFortextboxContaingImageInside = new HBox();
		hboxFortextboxContaingImageInside.setSpacing(5);
		Button btnForsearchPatient = new Button();
		Image searchImageTextBox = new Image("file:/C:/Auto_Uplaoder/AutoUploader/images/search.png");
		ImageView searchImageView = new ImageView(searchImageTextBox);
		searchImageView.setFitWidth(10);
		searchImageView.setFitHeight(10);
		btnForsearchPatient.setGraphic(searchImageView);
		btnForsearchPatient.setStyle("-fx-background-color: transparent; -fx-border-color: transparent;");
		searchTextField = new TextField();
		searchTextField.setStyle("-fx-background-color: transparent; -fx-border-width: 0 0 0 0; ");
// adding the searchtextfield and button in hbox 
		hboxFortextboxContaingImageInside.getChildren().addAll(searchTextField, btnForsearchPatient);
		hboxFortextboxContaingImageInside.setAlignment(Pos.CENTER);

		hboxFortextboxContaingImageInside.setStyle("-fx-border-radius: 5;" + "-fx-border-color: black;");
		searchTextField.setPromptText("search");
		// searchTextField.setDisable(false);
		searchTextField.setPrefSize(170, 20);
		btnForsearchPatient.setOnAction(e -> {
			// Get the search text and trim any leading/trailing spaces
			String searchedText = searchTextField.getText().trim();

			// Check if the search text is not empty
			if (!searchedText.isEmpty()) {
				// Filter the data based on the search text
				ObservableList<Patient> filteredData = filterDataBySearchText(patientData, searchedText);

				// Update the TableView with the filtered data
				updateTable(filteredData);

			} else {
				// Reset the TableView to show all patient data if the search text is empty
				updateTable(patientData);
			}
		});

		sitecomboBox.setOnAction(e -> {
			Rectangle selectedRectangle = null;
			if (searchThisWeekRectagle.getFill().equals(Color.ORANGE)) {
				selectedRectangle = searchThisWeekRectagle;
			} else if (searchThisMonthRecatangle.getFill().equals(Color.ORANGE)) {
				selectedRectangle = searchThisMonthRecatangle;
			} else if (searchLastThreeMonthRectagle.getFill().equals(Color.ORANGE)) {
				selectedRectangle = searchLastThreeMonthRectagle;
			} else {
				selectedRectangle = searchAllTimeMonthRectangle;
			}

			if (selectedRectangle == searchThisWeekRectagle) {
				searchThisWeekButton.fire();
			} else if (selectedRectangle == searchThisMonthRecatangle) {
				searchThisMonthButton.fire();
			} else if (selectedRectangle == searchLastThreeMonthRectagle) {
				searchLast3MonthButton.fire();
			} else {
				searchButtonFor6Month.fire();
			}
			// searchThisMonthButton.fire();
		});

		HBox patintsHeaderHbox = new HBox(30);
		// adding differnt component to hbox button and heeder
		patintsHeaderHbox.getChildren().addAll(labelAndImage, vboxContaingButtonAndRectagle,
				vboxContainingThisMonthButtonAndRectangle, vboxContainingThisThreeMonthButtonAndRectangle,
				vboxContainingAllTimeButtonAndRectangle, hboxFortextboxContaingImageInside);
		refreshImageView = new ImageView(new Image(new FileInputStream("resources/images/loading_gif.gif")));
//		refreshImageView.setVisible(false);
//		refreshImageView.setManaged(false);
		refreshImageView.setFitHeight(30);
		refreshImageView.setFitWidth(30);
		patientResultVBox.getChildren().addAll(patintsHeaderHbox, refreshImageView);
		// patientResultVBox.setAlignment(Pos.CENTER);

		// patientResultVBox.getChildren().add(refreshImageView);

		searchButtonFor6Month.setOnAction(e -> {
			// Reset colors for the rectangles
			searchThisMonthRecatangle.setFill(Color.WHITE);
			searchThisWeekRectagle.setFill(Color.WHITE);
			searchLastThreeMonthRectagle.setFill(Color.WHITE);
			searchAllTimeMonthRectangle.setFill(Color.ORANGE);

			// Show the loading gif (refreshImageView)
			refreshImageView.setVisible(true);
			refreshImageView.setManaged(true);

			// Clear the VBox and add the refreshImageView at index 1
			patientResultVBox.getChildren().remove(1); // Clear the current node at index 1
			patientResultVBox.getChildren().add(1, refreshImageView); // Add loading gif at index 1

			// Force layout update to ensure the loading gif is displayed
			// patientResultVBox.layout();

			// Increase the pause duration to give time for the UI to update
			// PauseTransition pause = new PauseTransition(Duration.millis(500)); //
			// Adjusted to 500ms

			// Handle data loading and table replacement after the pause
//		    pause.setOnFinished(event -> {
//		        try {
			// Fetch the data and create the new TableView
			TableView<Patient> thisMonthTableView = null;
			try {
				thisMonthTableView = createPatientResult(getPatientsThisMonth(username, pass));
			} catch (FileNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

			// Replace the refreshImageView with the TableView
			patientResultVBox.getChildren().remove(1); // Remove loading gif
			patientResultVBox.getChildren().add(1, thisMonthTableView); // Add the new TableView

//		        } catch (FileNotFoundException e1) {
//		            e1.printStackTrace();
			// }

			// Hide the loading gif after the table is displayed
			refreshImageView.setVisible(false);
			refreshImageView.setManaged(false);
		});

		// Start the pause transition (simulates data loading delay)
		// pause.play();
		// });
		searchLast3MonthButton.setOnAction(event -> {
			// Set the fill color for rectangles
			searchThisMonthRecatangle.setFill(Color.WHITE);
			searchThisWeekRectagle.setFill(Color.WHITE);
			searchLastThreeMonthRectagle.setFill(Color.ORANGE);
			searchAllTimeMonthRectangle.setFill(Color.WHITE);

			// Clear the current content at index 1 and add the loading image
			// (refreshImageView)
			patientResultVBox.getChildren().set(1, refreshImageView); // Replace current node with loading gif
			refreshImageView.setVisible(true);
			refreshImageView.setManaged(true);

			// Create a pause transition to simulate loading delay
			PauseTransition pause = new PauseTransition(Duration.millis(300)); // Adjust to 300ms or more

			// Run the loading and table update after the pause
//		    pause.setOnFinished(e -> {
//		        try {
			// Fetch data and create the TableView
			TableView<Patient> lastThreeMonthTableView = null;
			try {
				lastThreeMonthTableView = createPatientResult(getPatientsLastThreeMonth(username, password));
			} catch (FileNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

			// Replace the loading gif with the TableView
			patientResultVBox.getChildren().set(1, lastThreeMonthTableView);

			// }
//		catch (FileNotFoundException e1) {
//		            e1.printStackTrace();
//		        }

			// Hide the loading gif after fetching the data
			refreshImageView.setVisible(false);
			refreshImageView.setManaged(false);
		});

		// Start the pause transition
		// pause.play();
		// });
		searchThisMonthButton.setOnAction(event -> {

			// Update the rectangle fill colors to indicate the selected time range
			searchThisMonthRecatangle.setFill(Color.ORANGE);
			searchThisWeekRectagle.setFill(Color.WHITE);
			searchLastThreeMonthRectagle.setFill(Color.WHITE);
			searchAllTimeMonthRectangle.setFill(Color.WHITE);

			// Display the loading gif
			refreshImageView.setVisible(true);
			refreshImageView.setManaged(true);
			patientResultVBox.getChildren().set(1, refreshImageView); // Show the loading gif at index 1

			// Create a PauseTransition to simulate loading delay
			// PauseTransition pause = new PauseTransition(Duration.millis(300)); //
			// Increase the delay to show the loading gif

			// Run the loading and table update after the pause
//		    pause.setOnFinished(e -> {
//		        try {
			// Fetch and display patient data after the delay
			TableView<Patient> thisMonthTableView = null;
			// try {
			try {
				thisMonthTableView = createPatientResult(getPatientsThisMonth(username, pass));
			} catch (FileNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			// } catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			// e1.printStackTrace();
			// }

			// Replace the loading gif with the TableView
			patientResultVBox.getChildren().set(1, thisMonthTableView);

//		        } catch (FileNotFoundException e1) {
//		            e1.printStackTrace();
//		        }

			// Hide the loading gif after fetching the data
			refreshImageView.setVisible(false);
			refreshImageView.setManaged(false);
		});

		// Start the pause transition
		// pause.play();
		// Add VBox to StackPane and adjust margins
		dispalyPatientResultStackpane.getChildren().clear(); // Clear any previous data in the StackPane
		dispalyPatientResultStackpane.getChildren().add(patientResultVBox);
		StackPane.setMargin(patientResultVBox, new Insets(10, 0, 0, 15));

		// Clear and re-add the StackPane with the updated patient results
		fixedRectangleStackPane.getChildren().clear();
		fixedRectangleStackPane.getChildren().add(dispalyPatientResultStackpane);

		// });

		searchThisWeekButton.setOnAction(e ->

		{
			// Set the colors for the rectangles
			searchThisWeekRectagle.setFill(Color.ORANGE);
			searchThisMonthRecatangle.setFill(Color.WHITE);
			searchLastThreeMonthRectagle.setFill(Color.WHITE);
			searchAllTimeMonthRectangle.setFill(Color.WHITE);

			// Show the loading gif
			refreshImageView.setVisible(true);
			refreshImageView.setManaged(true);
			patientResultVBox.getChildren().set(1, refreshImageView); // Show loading gif at index 1

			// Create a PauseTransition to simulate a delay
			// PauseTransition pause = new PauseTransition(Duration.millis(300)); //
			// Increased to 300ms for better visibility

			// Run the loading and table update after the pause
			// pause.setOnFinished(event -> {
			// try {
			// Fetch and display patient data after the delay
			TableView<Patient> lastWeekPatientTable = null;
			System.out.println("last week table view ism" + lastWeekPatientTable);
			try {
				lastWeekPatientTable = createPatientResult(getLastWeekData(username, password));
				System.out.println("last week table view is" + lastWeekPatientTable);
			} catch (FileNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			patientResultVBox.getChildren().set(1, lastWeekPatientTable); // Replace loading gif with table

			// }
//	catch (FileNotFoundException e1) {
//				e1.printStackTrace();
//			}

			// Hide the loading gif after fetching the data
			refreshImageView.setVisible(false);
			refreshImageView.setManaged(false);
		});

		// Start the pause transition
		// pause.play();
//	});

		searchThisMonthButton.fire();

	}

	public TableView<Patient> createPatientResult(Map<HttpsConnectors.RESPONSE, String> responseListPatient)
			throws FileNotFoundException {
		System.out.println(responseListPatient);
		patientTableview = new TableView<>();
		patientTableview.setStyle("-fx-background-color: white;");
		TableColumn<Patient, String> namePatientColumn = new TableColumn<>("Name");
		namePatientColumn.setStyle("-fx-background-color:white;");
		TableColumn<Patient, Integer> caseIdColumn = new TableColumn<>("Case Id");
		caseIdColumn.setStyle("-fx-background-color:white;");
		TableColumn<Patient, Integer> mrnColumn = new TableColumn<>("MRN");
		mrnColumn.setStyle("-fx-background-color:white;");
		TableColumn<Patient, String> caseStatusColumn = new TableColumn<>("Case Status");
		caseStatusColumn.setStyle("-fx-background-color:white;");
		TableColumn<Patient, String> imageAddedDate = new TableColumn<>("Image Added");
		imageAddedDate.setStyle("-fx-background-color:white;");
		TableColumn<Patient, String> uploadedBy = new TableColumn<>("Uploaded By");
		uploadedBy.setStyle("-fx-background-color:white;");
		TableColumn<Patient, Button> imageContaingEditableImage = new TableColumn<>("");
		imageContaingEditableImage.setStyle("-fx-background-color:white;");
		TableColumn<Patient, String> caseCreatedDate = new TableColumn<>("Case Created");
		caseCreatedDate.setStyle("-fx-background-color:white;");

		patientTableview.getColumns().addAll(namePatientColumn, caseIdColumn, mrnColumn, caseStatusColumn,
				caseCreatedDate, imageAddedDate, uploadedBy, imageContaingEditableImage);

		namePatientColumn.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getName()));
		caseIdColumn.setCellValueFactory(data -> new SimpleObjectProperty<>(data.getValue().getCaseId()));
		mrnColumn.setCellValueFactory(data -> new SimpleObjectProperty<>(data.getValue().getMrn()));
		caseStatusColumn.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getCaseStatus()));

		// Use DateTimeParsingUtil for formatting
		caseCreatedDate.setCellValueFactory(
				data -> new SimpleStringProperty(Utilty.formatDate(data.getValue().getDateCreated())));

		imageAddedDate.setCellValueFactory(
				data -> new SimpleStringProperty(Utilty.formatDate(data.getValue().getImageAdded())));

		uploadedBy.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getUploadedBy()));
		imageContaingEditableImage.setCellValueFactory(data -> new SimpleObjectProperty<>(data.getValue().getBtn()));

		patientData = FXCollections.observableArrayList();

		Map<HttpsConnectors.RESPONSE, String> responseListForPatient = responseListPatient;
		String jsonResponse = responseListForPatient.get(HttpsConnectors.RESPONSE.VALUE);

		Gson gson = new Gson();
		JsonObject jsonObject = gson.fromJson(jsonResponse, JsonObject.class);
		JsonArray patientList = jsonObject.getAsJsonArray("patient_list");
		for (JsonElement patientElement : patientList) {
			JsonObject patientObject = patientElement.getAsJsonObject();
			String patientName = patientObject.get("patientName").getAsString();
			int patientId = patientObject.get("patientId").getAsInt();
			int caseId = patientObject.get("caseId").getAsInt();
			String caseStatus = patientObject.get("caseStatus").getAsString();

			// Handle the dateCreated value
			LocalDate dateCreated = null;
			JsonElement dateCreatedElement = patientObject.get("dateCreated");
			if (dateCreatedElement != null && !dateCreatedElement.isJsonNull()) {
				try {
					dateCreated = Utilty.parseDate(dateCreatedElement.getAsString());
				} catch (IllegalArgumentException e) {
					System.err.println("Error parsing dateCreated: " + e.getMessage());
					// You might want to log this error or handle it in some way
				}
			}

			// Handle the imageAddedDate value
			LocalDate imageAddedDate1 = null;
			JsonElement imageAddedDateElement = patientObject.get("imageAddedDate");
			if (imageAddedDateElement != null && !imageAddedDateElement.isJsonNull()) {
				try {
					imageAddedDate1 = Utilty.parseDate(imageAddedDateElement.getAsString());
				} catch (IllegalArgumentException e) {
					System.err.println("Error parsing imageAddedDate: " + e.getMessage());
					// You might want to log this error or handle it in some way
				}
			}
			String uploadedByPatient = patientObject.get("uploadedBy").getAsString();

			// Add new Patient data with null checks
			patientData.add(new Patient(patientName, patientId, caseId, caseStatus, dateCreated, imageAddedDate1,
					uploadedByPatient, btnForPatient()));
		}

		patientTableview.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
		patientTableview.setItems(patientData);
		return patientTableview;
	}

	// Method to filter data based on search text
	private ObservableList<Patient> filterDataBySearchText(ObservableList<Patient> patientData, String searchText) {
		// Ensure that patientData is not null before proceeding
		System.out.println(searchText);
		if (patientData == null) {
			return FXCollections.observableArrayList(); // Return an empty list if patientData is null
		}
		System.out.println(patientData);

		// Create a new list to store filtered data
		ObservableList<Patient> filteredList = FXCollections.observableArrayList();

		// Iterate through the patient data and check if any patient matches the search
		// text by name
		for (Patient patient : patientData) {
			if(patient!=null) {
				
			
			if (patient.getName() != null  ) {
				// Log the patient name for debugging purposes
				System.out.println("Patient Name: " + patient.getName());
				System.out.println("mrn is: "+patient.getMrn());
				System.out.println("case id is"+patient.getCaseId());
				System.out.println("upload status is"+patient.getUploadedBy());
				System.out.println("case status is"+patient.getCaseStatus());
				System.out.println("date created is"+patient.getDateCreated());

				// Perform a case-insensitive search by name
				String name = patient.getName().toLowerCase();
				String mrn=patient.getMrn().toString().toLowerCase();
				String caseId=patient.getCaseId().toString().toLowerCase();
				String uploadStatusIs=patient.getUploadedBy().toLowerCase();
				String dateUploaded=patient.getDateCreated().toString().toLowerCase();
				String dateCreated=patient.getDateCreated().toString().toLowerCase();
				String caseStatus=patient.getCaseStatus().toLowerCase();
				String searchTextForFilter=searchText.toLowerCase();
				if (name.contains(searchTextForFilter) || mrn.contains(searchTextForFilter)|| caseId.contains(searchTextForFilter)||caseId.contains(searchTextForFilter)||uploadStatusIs.contains(searchTextForFilter)||dateUploaded.contains(searchTextForFilter)||dateCreated.contains(searchTextForFilter)||caseStatus.contains(searchTextForFilter)) {
					// Add the matching patient to the filtered list
					filteredList.add(patient);
				}
				
			}
		}
		}

		return filteredList;
	}

	private TableView<Patient> refreshTable() throws FileNotFoundException {
	//	ObservableList<Patient> newData = null;
		Rectangle selectedRectangle = null;
		if (searchThisWeekRectagle.getFill().equals(Color.ORANGE)) {
			selectedRectangle = searchThisWeekRectagle;
		} else if (searchThisMonthRecatangle.getFill().equals(Color.ORANGE)) {
			selectedRectangle = searchThisMonthRecatangle;
		} else if (searchLastThreeMonthRectagle.getFill().equals(Color.ORANGE)) {
			selectedRectangle = searchLastThreeMonthRectagle;
		} else {
			selectedRectangle = searchAllTimeMonthRectangle;
		}

		if (selectedRectangle == searchThisWeekRectagle) {

			// Make the loading image visible
			refreshImageView.setVisible(true);
			refreshImageView.setManaged(true);

			TableView<Patient> thisWeekTableView = createPatientResult(getLastWeekData(userName, pass));
			return thisWeekTableView;

		}

		else if (selectedRectangle == searchThisMonthRecatangle) {
			TableView<Patient> thisMonthTableView = createPatientResult(getPatientsThisMonth(userName, pass));
			return thisMonthTableView;

		} else if (selectedRectangle == searchLastThreeMonthRectagle) {
			TableView<Patient> lastThreeMonthTableView = createPatientResult(getPatientsLastThreeMonth(userName, pass));
			return lastThreeMonthTableView;
		} else {
			return createPatientResult(getLastSixMonthData(userName, pass));

		}
		// return patientTableview;

	}

	// Method to be called when a rectangle is clicked
//	public void onRectangleClicked(Rectangle clickedRectangle) {
//		// Reset all rectangles to their default color
//		searchThisWeekRectagle.setFill(Color.WHITE);
//		searchThisMonthRecatangle.setFill(Color.WHITE);
//		searchLastThreeMonthRectagle.setFill(Color.WHITE);
//		searchAllTimeMonthRectangle.setFill(Color.WHITE);
//
//		// Set the clicked rectangle to orange
//		clickedRectangle.setFill(Color.ORANGE);
//
//	}

	// Method to update the TableView with new data
	private void updateTable(ObservableList<Patient> data) {
		patientTableview.setItems(data);
	}

	private Button btnForPatient() throws FileNotFoundException {
		Image shortcutImage = new Image(new FileInputStream("resources/images/vertical_png.png"));

		ImageView shortCutImageView = new ImageView(shortcutImage);
		shortCutImageView.setFitWidth(20);
		shortCutImageView.setFitHeight(15);
		Button btnForContectMenu = new Button();
		btnForContectMenu.setStyle("-fx-background-color:transparent; -fx-border-color: transparent;");
		btnForContectMenu.setGraphic(shortCutImageView);
		ContextMenu contextMenu = new ContextMenu();

		// Create menu items
		MenuItem edit = new MenuItem("Edit");
		MenuItem view = new MenuItem("View on EyePACS");
		MenuItem upload = new MenuItem("Upload");

		// Add menu items to the context menu
		contextMenu.getItems().addAll(edit, view, upload);
		edit.setOnAction(e -> {

			EditAddPatientDetails editPatient = new EditAddPatientDetails();
			try {
				editPatient.handleEditPatient(stage);
			} catch (FileNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		});
		// Action for linking the button with the specific patient
		btnForContectMenu.setOnAction(e -> {
			// Link the button with the specific patient here
			// System.out.println("Button linked with patient: " + patient.getName());
		});

		upload.setOnAction(e -> {
			UploadImages uploadResult = new UploadImages();
			uploadResult.createUpload();

		});

		btnForContectMenu.setOnAction(e -> {
			// get the position of the button when it is clicked
			Point2D screenPosition = btnForContectMenu.localToScreen(btnForContectMenu.getBoundsInLocal().getMinX(),
					btnForContectMenu.getBoundsInLocal().getMinY());
			double x = screenPosition.getX();
			double y = screenPosition.getY();
			System.out.println("context menu is called");
			contextMenu.show(shortCutImageView, x - 100.0, y + 30.0); // Adjust position if needed

		});

		return btnForContectMenu;

	}

	private Map<HttpsConnectors.RESPONSE, String> getPatientsLastThreeMonth(String userName, String password) {
		String credString = new EyePacsEncryptorAES().encryptEyePacsCredentials(userName, password);
		Utilty utilty = new Utilty();

		String urlForLastThreeMonth = "/uploader/patient/list/byDate/"
				+ utilty.getSiteIdFromComboBox(userName, password, siteComboBox);
		String lastThreeMonthDate = getLastThreeMonthDate();

		String jsonStringForLastThreesMonth = "{\"dateString\" : \"" + lastThreeMonthDate + "\"}";
		HttpsConnectors connector = new HttpsConnectors(HttpsConnectors.SERVER.LOCALHOST, urlForLastThreeMonth,
				HttpsConnectors.METHOD.POST);
		Map<HttpsConnectors.RESPONSE, String> response = connector.apiConnect(jsonStringForLastThreesMonth, credString,
				"text/plain", "application/json");
		System.out.println("Response = " + response.get(HttpsConnectors.RESPONSE.CODE));
		System.out.println("Response value = " + response.get(HttpsConnectors.RESPONSE.VALUE));
		return response;
	}

	private Map<HttpsConnectors.RESPONSE, String> getPatientsThisMonth(String userName, String password) {

		String credString = new EyePacsEncryptorAES().encryptEyePacsCredentials(userName, password);
		Utilty utilty = new Utilty();
		String urlForThisMonth = "/uploader/patient/list/byDate/"
				+ utilty.getSiteIdFromComboBox(userName, password, siteComboBox);
		String lastMonthDate = getThisMonthDate();
		String jsonStringForThisMonth = "{\"dateString\" : \"" + lastMonthDate + "\"}";
		HttpsConnectors connector = new HttpsConnectors(HttpsConnectors.SERVER.LOCALHOST, urlForThisMonth,
				HttpsConnectors.METHOD.POST);
		Map<HttpsConnectors.RESPONSE, String> response = connector.apiConnect(jsonStringForThisMonth, credString,
				"text/plain", "application/json");
		System.out.println("Response = " + response.get(HttpsConnectors.RESPONSE.CODE));
		System.out.println("Response value = " + response.get(HttpsConnectors.RESPONSE.VALUE));
		return response;

	}

	private Map<HttpsConnectors.RESPONSE, String> getLastWeekData(String userName, String password) {

		String credString = new EyePacsEncryptorAES().encryptEyePacsCredentials(userName, password);
		Utilty utilty = new Utilty();
		String urlForLastWeek = "/uploader/patient/list/byDate/"
				+ utilty.getSiteIdFromComboBox(userName, password, siteComboBox);

		String lastWeekDate = getLastWeekDate();
		String lastWeekjsonString = "{\"dateString\" : \"" + lastWeekDate + "\"}";
		HttpsConnectors connector = new HttpsConnectors(HttpsConnectors.SERVER.LOCALHOST, urlForLastWeek,
				HttpsConnectors.METHOD.POST);
		Map<HttpsConnectors.RESPONSE, String> response = connector.apiConnect(lastWeekjsonString, credString,
				"text/plain", "application/json");
		System.out.println("Response = " + response.get(HttpsConnectors.RESPONSE.CODE));
		System.out.println("Response value = " + response.get(HttpsConnectors.RESPONSE.VALUE));
		return response;

	}

	private Map<HttpsConnectors.RESPONSE, String> getLastSixMonthData(String userName, String password) {
		// "{\"dateString\" : \"20240501\"}"
		Utilty utilty = new Utilty();

		String credString = new EyePacsEncryptorAES().encryptEyePacsCredentials(userName, password);
		String urlForLastSixMonth = "/uploader/patient/list/byDate/"
				+ utilty.getSiteIdFromComboBox(userName, password, siteComboBox);
		// String lastSixMonthDate=getSixMonthsAgoDate();
		String dateString = getSixMonthsAgoDate();
		String jsonString = "{\"dateString\" : \"" + dateString + "\"}";
		HttpsConnectors connector = new HttpsConnectors(HttpsConnectors.SERVER.LOCALHOST, urlForLastSixMonth,
				HttpsConnectors.METHOD.POST);
		Map<HttpsConnectors.RESPONSE, String> response = connector.apiConnect(jsonString, credString, "text/plain",
				"application/json");
		System.out.println("Response = " + response.get(HttpsConnectors.RESPONSE.CODE));
		System.out.println("Response value = " + response.get(HttpsConnectors.RESPONSE.VALUE));
		return response;

	}

	public static String getSixMonthsAgoDate() {
		LocalDate sixMonthsAgo = LocalDate.now().minusMonths(6);
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMdd");
		return sixMonthsAgo.format(formatter);
	}

	public static String getLastThreeMonthDate() {
		LocalDate sixMonthsAgo = LocalDate.now().minusMonths(3);
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMdd");
		return sixMonthsAgo.format(formatter);
	}

	// Method for Last Week (7 days ago)
	public static String getLastWeekDate() {
		LocalDate lastWeek = LocalDate.now().minusWeeks(1);
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMdd");
		return lastWeek.format(formatter);
	}

	// Method for This Month (1st day of the current month)
	public static String getThisMonthDate() {
		LocalDate firstDayOfThisMonth = LocalDate.now().withDayOfMonth(1);
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMdd");
		return firstDayOfThisMonth.format(formatter);
	}
}
