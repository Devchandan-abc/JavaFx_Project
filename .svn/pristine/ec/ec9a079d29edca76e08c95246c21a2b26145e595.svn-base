package com.autouploader;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.image.Image;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;

import java.time.LocalDate;

public class DashBoardResult {

    public void displayResult(Stage stageForDashBoardResult, BorderPane borderPane,String result, Pane fixedRec)
    {
        VBox resultContent = new VBox(30);
        resultContent.setAlignment(Pos.TOP_LEFT);


        // Greeting based on the time of the day and the username
        String greeting = generateGreeting();
        Label greetingLabel = new Label(greeting);
        greetingLabel.setStyle("-fx-font-size: 18px; -fx-font-weight: bold;");

        // Today's date label
        Label dateLabel = new Label("Jan 23, 2024");
        dateLabel.setStyle("-fx-font-size: 8 px;");
        HBox greetingHbox=new HBox(16);
        greetingHbox.setAlignment(Pos.TOP_LEFT);
        greetingHbox.getChildren().addAll(greetingLabel,dateLabel);
        //Site Statistics section
        VBox siteStatsBox = siteStatics();
        TableView<Appointment> upcomingAppointmentsTable = createUpcomingAppointmentsTable();
        // Add components to the resultContent VBox
        resultContent.getChildren().addAll(greetingHbox, siteStatsBox,upcomingAppointmentsTable);
        fixedRec.getChildren().clear();
        fixedRec.getChildren().add(resultContent);
        resultContent.setPadding(new Insets(0,0,0,20));


        // Optional: Print the result to verify its content
        System.out.println("Result Content: " + result);





    }
    public String generateGreeting()
    {
        return "Good Morning, Dev";
    }

    /*private VBox siteStatics()
    {
        VBox siteStatsBox = new VBox(10);
        // Create a Rectangle to enclose the content
        Rectangle statsRectangle = new Rectangle();
        statsRectangle.setFill(Color.WHITE);
        statsRectangle.setStroke(Color.BLACK); // Set the border color (optional)
        statsRectangle.setStrokeWidth(1.0); // Set the border width (optional)
        statsRectangle.setHeight(100);
        statsRectangle.setWidth(400);


        // Create the Site Statistics header (heading and dropdown in the same row)
        HBox siteStatsHeader = createSiteStatsHeader();

        // Row for patient statistics
        HBox patientStatsRow = createPatientStatsRow();

        // Add components to the VBox (not StackPane)
        siteStatsBox.getChildren().addAll(statsRectangle, siteStatsHeader, patientStatsRow);

        return siteStatsBox;
    }

*/

    /*private VBox siteStatics() {
       // VBox siteStatsBox = new VBox(10);

        // Create the Site Statistics header (heading and dropdown in the same row)
        HBox siteStatsHeader = createSiteStatsHeader();

        // Row for patient statistics
        HBox patientStatsRow = createPatientStatsRow();

        // Create a VBox to hold patient statistics
        VBox statsVBox = new VBox(10);
        statsVBox.getChildren().addAll(siteStatsHeader, patientStatsRow);

        // Create a Rectangle to enclose the content
        Rectangle statsRectangle = new Rectangle();
        statsRectangle.setFill(Color.WHITE);
        statsRectangle.setStroke(Color.BLACK); // Set the border color (optional)
        statsRectangle.setStrokeWidth(1.0); // Set the border width (optional)
        statsRectangle.setHeight(100);
        statsRectangle.setWidth(400);

        // Create a StackPane to add the VBox to the center of the Rectangle
        StackPane stackPane = new StackPane(statsVBox);
        statsRectangle.widthProperty().addListener((obs, oldVal, newVal) -> {
            stackPane.setMaxWidth(newVal.doubleValue());
            stackPane.setPrefWidth(newVal.doubleValue());
        });

        // Add the StackPane to the statsRectangle
        statsRectangle.setClip(stackPane);

        // Create a VBox to hold the statsRectangle
        VBox siteStats = new VBox(statsRectangle);

        // Add components to the VBox (not StackPane)
       siteStats.getChildren().addAll(siteStatsHeader, patientStatsRow);

        return siteStats;
    }
*/
    private VBox siteStatics() {
        // Create the Site Statistics header (heading and dropdown in the same row)
        HBox siteStatsHeader = createSiteStatsHeader();

        // Row for patient statistics
        HBox patientStatsRow = createPatientStatsRow();

        // Create a VBox to hold patient statistics
        VBox statsVBox = new VBox(10);
        statsVBox.getChildren().addAll(siteStatsHeader, patientStatsRow);

        // Create a Rectangle to enclose the content
        Rectangle statsRectangle = new Rectangle();
        statsRectangle.setFill(Color.WHITE);
        statsRectangle.setStroke(Color.BLACK); // Set the border color (optional)
        statsRectangle.setStrokeWidth(3.0); // Set the border width (optional)
        statsRectangle.setHeight(100);
        statsRectangle.setWidth(400);

        // Clip the VBox with the Rectangle
        statsVBox.setClip(statsRectangle);

        // Create a VBox to hold the statsVBox
        VBox siteStatsBox = new VBox(statsVBox);

        return siteStatsBox;
    }

    private HBox createPatientStatsRow() {
        HBox patientStatsRow = new HBox(20);

        // Create VBox for each statistic
        VBox screenedBox = createStatisticBox("50","Patients Screened");
        VBox referredBox = createStatisticBox("100","Patients Referred");
        VBox encounterBox = createStatisticBox("105","Patients Encountered");

        // Add VBox for each statistic to the HBox
        patientStatsRow.getChildren().addAll(screenedBox, referredBox, encounterBox);

        return patientStatsRow;
    }
    private VBox createStatisticBox( String value,String label) {
        VBox statisticBox = new VBox(2);

        // Create labels for the statistic
        Label valueLabel = new Label(value);
        Label labelLabel = new Label(label);


        // Add labels to the VBox
        statisticBox.getChildren().addAll(valueLabel,labelLabel);

        // Align the VBox at the top
        statisticBox.setAlignment(Pos.TOP_CENTER);

        return statisticBox;
    }
    private HBox createSiteStatsHeader() {
        HBox siteStatsHeader = new HBox(170);

        // Heading for Site Statistics
        Label headingLabel = new Label("Site Statistics");
        headingLabel.setStyle("-fx-font-size: 16px; -fx-font-weight: bold;");

        // Dropdown for time period selection
        ComboBox<String> timePeriodDropdown = new ComboBox<>();
        timePeriodDropdown.getItems().addAll("This Month", "Last Week");
        timePeriodDropdown.setValue("This Month");

        // Add components to the HBox
        siteStatsHeader.getChildren().addAll(headingLabel, timePeriodDropdown);

        return siteStatsHeader;
    }

    private TableView<Appointment> createUpcomingAppointmentsTable() {
        // Logic to create and populate the TableView with upcoming appointments data
        // You can use the TableView API to define columns and add data dynamically
        TableView<Appointment> appointmentsTable = new TableView<>();

        // Add columns to the TableView (e.g., Name, Ordering Provider, Date Ordered)
        TableColumn<Appointment, String> nameColumn = new TableColumn<>("Name");
        TableColumn<Appointment, String> orderingProviderColumn = new TableColumn<>("Ordering Provider");
        TableColumn<Appointment, LocalDate> dateOrderedColumn = new TableColumn<>("Date Ordered");
        TableColumn<Appointment, Image>  imageUplaod=new TableColumn<>("dev.png");


        appointmentsTable.getColumns().addAll(nameColumn, orderingProviderColumn, dateOrderedColumn);

        // Populate the TableView with data (replace this with your actual data)
        ObservableList<Appointment> appointmentsData = FXCollections.observableArrayList(
                new Appointment("John Doe", "Dr. Smith", LocalDate.of(2023, 1, 25)),
                new Appointment("Jane Doe", "Dr. Johnson", LocalDate.of(2023, 2, 1))
                // Add more data as needed
        );
        appointmentsTable.setItems(appointmentsData);

        return appointmentsTable;
    }




}
