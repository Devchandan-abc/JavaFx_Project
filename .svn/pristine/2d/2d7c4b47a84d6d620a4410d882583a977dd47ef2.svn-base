package com.autouploader;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.util.List;
import java.util.Properties;
import java.util.stream.Collectors;

import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.Dragboard;
import javafx.scene.input.TransferMode;
import javafx.scene.layout.Border;
import javafx.scene.layout.BorderStroke;
import javafx.scene.layout.BorderStrokeStyle;
import javafx.scene.layout.BorderWidths;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.stage.FileChooser;

public class UploadImages {
	private ImageView imageView;
	private int imageCount=0;
	public ImageView getImageView() {
		return imageView;
	}
	public void setImageView(ImageView imageView) {
		this.imageView = imageView;
	}
	public int getImageCount() {
		return imageCount;
	}
	public void setImageCount(int imageCount) {
		this.imageCount = imageCount;
	}
	public VBox createUpload() {

		// Create a GridPane to hold the images
		GridPane imageGrid = new GridPane();
		imageGrid.setPadding(new Insets(10));
		imageGrid.setHgap(10);
		imageGrid.setVgap(10);
		// Create a Rectangle to represent the drag target
		VBox dragTarget = new VBox();

		dragTarget.setBorder(new Border(
				new BorderStroke(Color.BLACK, BorderStrokeStyle.SOLID, new CornerRadii(5), new BorderWidths(1))));
		dragTarget.setPrefSize(100, 300);

		// Setup drag-and-drop events
		dragTarget.setOnDragOver(event -> {
			if (event.getGestureSource() != dragTarget && event.getDragboard().hasFiles()) {
				event.acceptTransferModes(TransferMode.COPY_OR_MOVE);
				dragTarget.setStyle("-fx-background-color: white;");
			}
			event.consume();
		});

		dragTarget.setOnDragEntered(event -> {
			if (event.getGestureSource() != dragTarget && event.getDragboard().hasFiles()) {
				// dragTarget.setFill(Color.GREEN);
				dragTarget.setStyle("-fx-background-color: white;");

			}
			event.consume();
		});

		dragTarget.setOnDragExited(event -> {
			// dragTarget.setFill(Color.LIGHTGRAY);
			dragTarget.setStyle("-fx-background-color: white;");
			event.consume();
		});

		dragTarget.setOnDragDropped(event -> {
			Dragboard db = event.getDragboard();
			boolean success = false;
			if (db.hasFiles()) {
				success = true;
				for (File file : db.getFiles()) {
					displayImage(file, imageGrid);
				}
				event.setDropCompleted(success);
				event.consume();
			}
		});

		// Button to upload from computer
		Button uploadFromComputerButton = new Button("UPLOAD FROM COMPUTER");
		// uploadContent.getChildren().add(uploadFromComputerButton);
		uploadFromComputerButton.setPrefSize(440, 28);
		uploadFromComputerButton.setStyle("-fx-background-color: orange; " + // Set
				"-fx-text-fill: white; " + // Set the text
				"-fx-font-weight: bold; " + // Set the font weight to bold
				"-fx-border-radius: 5;" // Set the border radius (adjust the value as needed)
		);

		uploadFromComputerButton.setOnAction(event -> {
			FileChooser fileChooser = new FileChooser();
			fileChooser.getExtensionFilters()
					.add(new FileChooser.ExtensionFilter("Image Files", "*.png", "*.jpg", "*.jpeg", "*.gif", "*.tiff"));
			Properties properties1 = new Properties();
			try {
				// Load the properties file
				properties1.load(new FileInputStream("settings.properties"));

				// Get the property value and print it out
				String selectedPath = properties1.getProperty("imagepath");
				System.out.println("Selected Value: " + selectedPath);
				fileChooser.setInitialDirectory(new File(selectedPath));

			} catch (IOException ex) {
				ex.printStackTrace();
			}

			File selectedFile = fileChooser.showOpenDialog(null);
			if (selectedFile != null) {
				displayImage(selectedFile, imageGrid);
			}
		});
		VBox root = new VBox(10);
		VBox vbox1 = new VBox(10);
		vbox1.setPadding(new Insets(4, 0, 0, 0));
		Label label = new Label("Drag and drop files into this container");
		imageView = new ImageView(new Image("file:C:\\Auto_Uplaoder\\drag.jpg"));
		imageView.setVisible(true);
		imageView.setManaged(true);
		imageView.setFitHeight(80);
		imageView.setFitWidth(100);
		vbox1.getChildren().addAll(uploadFromComputerButton, label, imageView);
		vbox1.setAlignment(Pos.CENTER);

		// Create a root layout and add the components

		imageGrid.setAlignment(Pos.CENTER);

		dragTarget.getChildren().addAll(vbox1, imageGrid);

		root.getChildren().add(dragTarget);
		root.setStyle("-fx-background-color: white;");
		return root;

	}
	public List<Image> loadImages(List<File> selectedFiles) {
		return selectedFiles.stream().map(file -> new Image(file.toURI().toString())).collect(Collectors.toList());

	}
	private void displayImage(File file, GridPane imageGrid) {
		
		try {
			String imageType = Files.probeContentType(file.toPath());
			if (imageType != null && imageType.startsWith("image")) {

				Image image = new Image(new FileInputStream(file));
				ImageView imageView = new ImageView(image);
				
				imageView.setFitWidth(100);
				imageView.setFitHeight(100);
				imageView.setPreserveRatio(true);

				int column = imageCount % 4;
				int row = imageCount / 4;

				imageGrid.add(imageView, column, row);
				imageCount++;
				  // Hide the dragImageView after the first image is added
	            if (imageCount > 0) {
	                this.imageView.setVisible(false);
	                this.imageView.setManaged(false);
	            }
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
}
