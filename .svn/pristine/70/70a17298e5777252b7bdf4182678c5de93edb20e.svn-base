package com.autouploader;

import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.Dragboard;
import javafx.scene.input.MouseEvent;
import javafx.scene.input.TransferMode;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.paint.ImagePattern;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.StrokeType;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.Properties;

public class UploadResult {
	private static TitledPane patientDetailsPane;
	private TitledPane medicalDetailsPane;
	private static TitledPane uploadTitledPane;
	private VBox vboxforaccordianandLabel;
	private VBox rectanglesContainer;
	private VBox vboxforPateintLabel;
	private VBox vboxForMainContent;
	private static int MAX_CHILDREN = 3;
	private ScrollPane scrollPane;
	private Properties properties;
	private Properties properties1;
	private ComboBox<Integer> imageAmountComboBox;
	private StackPane uploadStackPane;
	private HBox hboxForImage;
	private List<Image> thumbnailImages;
	private Label previouslyClickedLabel = null;
	private TextField diabaticTypeTextfield;

	private VBox insulinVBox;
	private VBox diabaticTypeVBox;
	private VBox vboxforPregnancy;
	private ImageView imageView;
	private ImageView validaionimageView;
	private ImageView uploadImageView;
	private ImageView medicalImageView;
	private Rectangle previouslyClickedRectangle;
	private int imageCount;
	// Store patient details in a map

	// public Integer defaultImageForComboBox=Dashboard.selectedValue;
	public void displayUpload(Stage stage, BorderPane borderPane, String result, Pane fixedRectangleStackPane)
			throws FileNotFoundException {
		uploadStackPane = new StackPane();
		// Create labels, image, search textbox, and list of patient names
		Label queueLabel = new Label("Queue");
		queueLabel.setStyle("-fx-font-weight: bold; -fx-font-size: 16px"); // Set bold and font size
		ImageView imageViewRefresh = new ImageView(new Image(new FileInputStream("resources/images/Refresh.png")));
		imageViewRefresh.setFitHeight(13);
		imageViewRefresh.setFitWidth(13);
		Button btn = new Button();
		btn.setStyle("-fx-background-color: transparent; -fx-border-color: transparent;");
		btn.setGraphic(imageViewRefresh);
		// Create a colored circle for the background of the "+"
		Circle refreshCircle = new Circle(10, Color.ORANGE);
		StackPane refreshStackPane = new StackPane();
		refreshStackPane.getChildren().addAll(refreshCircle, btn);
		// button
		Button btnForAddPatient = new Button();
		StackPane plusStackPane = Utilty.addPatientCalled(btnForAddPatient, stage);
		plusStackPane.setPadding(new Insets(0, 0, 0, 115));
// craeting the hbox contain the queue label and refreshimage
		HBox hbox = new HBox(queueLabel, refreshStackPane);
		hbox.setSpacing(110);
		// Inaitalixing the Scrooolpane
		scrollPane = new ScrollPane();
		// scrollPane.setStyle("-fx-pref-width: 10px;");
//		scrollPane.setStyle("-fx-thumb: 1px;");
// add the differnt label in vbox
		vboxforPateintLabel = new VBox(30);
		HBox patientLabel1 = labelForPatient("Dev Kumar"); // Replace with actual patient name
		HBox patientLabel2 = labelForPatient("Raja Kumar"); // Replace with actual patient name
		HBox patentLabel3 = labelForPatient("Sunny Kumar");
		HBox patentLabel4 = labelForPatient("Sunny Kumar");
		HBox patentLabel5 = labelForPatient("Sunny Kumar");
		HBox patentLabel6 = labelForPatient("Sunny Kumar");
		HBox patentLabel7 = labelForPatient("Devchandan kumar111111");

		vboxforPateintLabel.getChildren().addAll(patientLabel1, patientLabel2, patentLabel3, patentLabel4, patentLabel5,
				patentLabel6, patentLabel7);
		//vboxforPateintLabel.setPadding(new Insets(8));
		// setting the content to the scrollpane
		scrollPane.setContent(vboxforPateintLabel);
		// scrollPane.setPadding(new Insets(5));
		scrollPane.setStyle("-fx-background-color:white");
		vboxforPateintLabel.setStyle("-fx-background-color: white;");

		/// creating a Hbox containg image and text field
		HBox hboxforsearchTextFieldandImage = new HBox();
		Image searchImageTextBox = new Image(new FileInputStream("resources/images/search.png"));
		ImageView searchImageView = new ImageView(searchImageTextBox);
		searchImageView.setFitWidth(10);
		searchImageView.setFitHeight(10);
		Button btnContaingSearch = new Button();
		btnContaingSearch.setGraphic(searchImageView);
		btnContaingSearch.setStyle("-fx-background-color: transparent; -fx-border-color: transparent;");
		TextField searchTextField = new TextField();
		searchTextField.setPromptText("Search");
		// making the width of searchtextField to 0 px
		searchTextField.setStyle("-fx-background-color: transparent; -fx-border-width: 0 0 0 0; ");
		hboxforsearchTextFieldandImage.setStyle("-fx-border-radius: 2;" + "-fx-border-color: black;");
		hboxforsearchTextFieldandImage.getChildren().addAll(searchTextField, btnContaingSearch);
		//// setting action for search
		btnContaingSearch.setOnAction(e -> {
			String searchText = searchTextField.getText().trim();
			if (searchText.isEmpty()) {
				// If search text is empty, add the original vbox to the scroll pane
				scrollPane.setContent(vboxforPateintLabel);
				// return; // Exit the event handler
			} else {
				// boolean matchFound = false;
				for (Node node : vboxforPateintLabel.getChildren()) {
					if (node instanceof Label) {
						Label label = (Label) node;
						if (label.getText().contains(searchText)) { // Use contains() instead of equals() if partial
																	// matches are allowed
							// Remove the existing content from the scroll pane
							// scrollPane.setContent(null);
							// Set the label as the content of the scroll pane
							scrollPane.setContent(label);
							// matchFound = true;
							break; // Exit the loop since we found a match
						}
					}
				}
//				if (!matchFound) {
//					// Reset the content of the scroll pane to the original vbox
//					scrollPane.setContent(vboxforPateintLabel);
//
//				}
			}
		});

		/*
		 * textProperty() of the searchTextField. In JavaFX, many properties of UI
		 * elements are observable, meaning you can register listeners to be notified
		 * when their values change. The textProperty() of a TextField represents its
		 * current text content.
		 */
		searchTextField.textProperty().addListener((observable, oldValue, newValue) -> {
			if (newValue.isEmpty()) {
				// If search text is cleared, restore the original vbox inside the scroll pane
				scrollPane.setContent(vboxforPateintLabel);
			}
		});
		/// Button for patient searching
		HBox hboxForPatientFiltering = new HBox();
		// hboxForPatientFiltering.setPrefWidth(100);
		Button btnForThisMonth = new Button("Show Today's");
		// btnForThisMonth.setPrefWidth(50);

		// roundButton.setStyle("-fx-background-radius: 0");
		btnForThisMonth.setStyle(
				"-fx-background-color: transparent; -fx-border-width: 0 0 0 0; -fx-border-radius:0; -fx-background-radius: 0");
		Button btnForAllTime = new Button("  All Patients    ");

		btnForAllTime.setStyle(
				"-fx-background-color: transparent; -fx-border-width: 0 0 0 0; -fx-background-radius: 0;-fx-border-radius:0;");
		hboxForPatientFiltering.getChildren().addAll(btnForThisMonth, btnForAllTime);
		hboxForPatientFiltering.setMaxWidth(200);
		btnForThisMonth.setOnAction(e -> {
			btnForThisMonth.setStyle("-fx-background-color: orange;-fx-border-radius:0;-fx-font-weight: bold;");
			btnForAllTime.setStyle("-fx-background-color:lightgrey;-fx-font-weight: bold;");

		});

		btnForAllTime.setOnAction(e -> {
			btnForAllTime.setStyle("-fx-background-color: orange;-fx-border-radius:5;-fx-font-weight: bold;");
			btnForThisMonth.setStyle("-fx-background-color:lightgrey;-fx-font-weight: bold;");
			// btnForAllTime.fire();

		});
		btnForAllTime.fire();
		// Create a VBox for search textbox and patient names
		hbox.setMaxWidth(200);
		hboxforsearchTextFieldandImage.setMaxWidth(200);
		// hboxForPatientFiltering.setMaxWidth(200);
		vboxForMainContent = new VBox(hbox, hboxforsearchTextFieldandImage, hboxForPatientFiltering, scrollPane,
				plusStackPane);
		scrollPane.setStyle("-fx-background-color:white;");

		vboxForMainContent.setBorder(new Border(
				new BorderStroke(Color.LIGHTGRAY, BorderStrokeStyle.SOLID, new CornerRadii(5), new BorderWidths(.7))));

		vboxForMainContent.setStyle("-fx-background-color:white");
		vboxForMainContent.setPadding(new Insets(20));
		vboxForMainContent.setPrefSize(250, 500);
		vboxForMainContent.setSpacing(30);
		uploadStackPane.getChildren().add(vboxForMainContent);

		// setting margin for vbox
		StackPane.setMargin(vboxForMainContent, new Insets(10));
		vboxforaccordianandLabel = new VBox();
		vboxforaccordianandLabel.setStyle("-fx-background-color:white");
		vboxforaccordianandLabel.setPadding(new Insets(20, 0, 0, 0));
		vboxForMainContent.setStyle("-fx-background-color:white");
		vboxforaccordianandLabel.setPrefSize(750, 550);
		Label lablelforSelectingpatient = new Label();
		lablelforSelectingpatient.setPadding(new Insets(250, 0, 0, 300));
		lablelforSelectingpatient.setText("Select a patient from the Queue to Continue");
		vboxforaccordianandLabel.getChildren().add(lablelforSelectingpatient);
		vboxforaccordianandLabel.setBorder(new Border(
				new BorderStroke(Color.LIGHTGRAY, BorderStrokeStyle.SOLID, new CornerRadii(5), new BorderWidths(.7))));
		StackPane stackPaneforLabelAndAccordiaon = new StackPane();
		stackPaneforLabelAndAccordiaon.getChildren().add(vboxforaccordianandLabel);
// setting padding for vbox
		vboxforaccordianandLabel.setPadding(new Insets(10));

		stackPaneforLabelAndAccordiaon.setPadding(new Insets(10));

		// HBox for the selectingthe patient

		HBox hboxForPatientandAccordian = new HBox(15);
		hboxForPatientandAccordian.getChildren().addAll(uploadStackPane, stackPaneforLabelAndAccordiaon);
		fixedRectangleStackPane.getChildren().clear();
		fixedRectangleStackPane.getChildren().add(hboxForPatientandAccordian);
	}

//	private VBox refreshDataFromQueue(String name) {
//		Label changedLevel = labelForPatient(name);
//		if (vboxforPateintLabel.getChildren().size() <= MAX_CHILDREN) {
//			// Add your node here
//			vboxforPateintLabel.getChildren().add(changedLevel);
//		} else {
//			System.out.println("Maximum number of children reached.");
//		}
//
//		// Replace the existing vbx with the new one
//		vboxForMainContent.getChildren().set(2, vboxforPateintLabel);
//
//		return vboxforPateintLabel;
//
//	}

//	public Label labelForPatient(String name) {
//		Label label = new Label(name);
//		label.setOnMouseClicked(e -> {
//			if (previouslyClickedLabel != null) {
//				previouslyClickedLabel.setTextFill(Color.BLACK); // Assuming black is the original color
//			}
//
//			vboxforaccordianandLabel.getChildren().clear();
//			label.setTextFill(Color.ORANGE);
//			try {
//				vboxforaccordianandLabel.getChildren().add(createAccordion(label));
//			} catch (FileNotFoundException e1) {
//				// TODO Auto-generated catch block
//				e1.printStackTrace();
//			}
//			previouslyClickedLabel = label;
//
//			Platform.runLater(() -> {
//				patientDetailsPane.setExpanded(true);
//			});
//
//		});
//		return label;
//	}
	/**
	 * 
	 * @param name
	 * @return Hox containing rectagle indicator and name label
	 */
	public HBox labelForPatient(String name) {
	    // Create a label for the patient's name
	    Label label = new Label(name);
	    
	    // Create a rectangle to indicate the selection
	    Rectangle selectionIndicator = new Rectangle(10, 25); // Width 10, Height 20
	    selectionIndicator.setFill(Color.TRANSPARENT); // Initially transparent

	    // Create an HBox to hold both the label and the rectangle
	    HBox labelContainer = new HBox(5); // Spacing of 5 pixels between label and rectangle
	    labelContainer.setAlignment(Pos.CENTER_LEFT);
	    labelContainer.getChildren().addAll(selectionIndicator, label);
	    
	    label.setOnMouseClicked(e -> {
	        if (previouslyClickedLabel != null) {
	            previouslyClickedLabel.setTextFill(Color.BLACK); // Assuming black is the original color
	            // Hide the rectangle of the previously clicked patient
	            previouslyClickedRectangle.setFill(Color.TRANSPARENT);
	        }
	        
	        // Update the label color and rectangle for the currently clicked patient
	        label.setTextFill(Color.ORANGE);
	        selectionIndicator.setFill(Color.ORANGE); // Set the rectangle color to orange

	        // Clear the VBox and add the new content
	        vboxforaccordianandLabel.getChildren().clear();
	        try {
	            vboxforaccordianandLabel.getChildren().add(createAccordion(label));
	        } catch (FileNotFoundException e1) {
	            e1.printStackTrace();
	        }

	        // Update the previously clicked label and rectangle references
	        previouslyClickedLabel = label;
	        previouslyClickedRectangle = selectionIndicator;

	        Platform.runLater(() -> {
	            patientDetailsPane.setExpanded(true);
	        });
	    });

	    return labelContainer; // Return the HBox containing the label and rectangle
	}
/**
 * 
 * @param name
 * @return
 * @throws FileNotFoundException
 */
	public Accordion createAccordion(Label name) throws FileNotFoundException {
		Accordion accordion = new Accordion();
		accordion.setStyle("-fx-background-color:#ffffff !important;");
		// Create an image view for the icon
		Image icon = new Image(new FileInputStream("resources/images/validationImage.png")); // Update the path to your
		validaionimageView = new ImageView(icon);
		validaionimageView.setFitHeight(20); // Set desired height
		validaionimageView.setFitWidth(20); // Set desired width
		// Create a label for the title
		Label titleLabel = new Label("Patient Details");
		titleLabel.setStyle("-fx-font-weight: bold; -fx-font-size: 12px;-fx-font-family: 'Arial';");
		// Create a HBox for the custom header
		HBox header = new HBox(600, titleLabel, validaionimageView);
		header.setPadding(new Insets(5));
		header.setAlignment(Pos.CENTER_LEFT);
		validaionimageView.setVisible(false);
		patientDetailsPane = new TitledPane();
		patientDetailsPane.setStyle("-fx-background-color:white;");
		patientDetailsPane.setGraphic(header); // Set custom header
		patientDetailsPane.setContent(createPatientDetailsForm(name));
		uploadTitledPane = new TitledPane();
		Label uploadLabel = new Label("Upload");
		uploadLabel.setStyle("-fx-font-weight: bold; -fx-font-size: 12px;-fx-font-family: 'Arial';");
		Image iconForUpload = new Image(new FileInputStream("resources/images/validationImage.png")); // Update the path																										// to your
		
		uploadImageView = new ImageView(iconForUpload);
		uploadImageView.setFitHeight(20); // Set desired height
		uploadImageView.setFitWidth(20); // Set desired width
		HBox uploadLabelHbOx = new HBox(645, uploadLabel, uploadImageView);
		uploadLabelHbOx.setPadding(new Insets(5));
		header.setAlignment(Pos.CENTER_LEFT);
		uploadImageView.setVisible(false);
		uploadTitledPane.setGraphic(uploadLabelHbOx); // Set custom header
		// carting the object og UploadImage Class
		UploadImages uploadImage=new UploadImages();
		uploadTitledPane.setContent(uploadImage.createUpload());
		medicalDetailsPane = new TitledPane();
		Image iconFormedicalRecord = new Image(new FileInputStream("resources/images/validationImage.png"));																										
		medicalImageView = new ImageView(iconFormedicalRecord);
		medicalImageView.setFitHeight(20); // Set desired height
		medicalImageView.setFitWidth(20); // Set desired width
		Label medicalDetailLabel = new Label("Medical Details");
		medicalDetailLabel.setStyle("-fx-font-weight: bold; -fx-font-size: 12px;-fx-font-family: 'Arial';");
		HBox medicalDetailsHBox = new HBox(600, medicalDetailLabel, medicalImageView);
		medicalImageView.setVisible(false);
		medicalDetailsHBox.setPadding(new Insets(5));
		medicalDetailsHBox.setAlignment(Pos.CENTER_LEFT);
		medicalDetailsPane.setGraphic(medicalDetailsHBox); // Set custom header
		medicalDetailsPane.setContent(showMedicalDetailsForm());
		accordion.getPanes().addAll(patientDetailsPane, uploadTitledPane, medicalDetailsPane);
		patientDetailsPane.expandedProperty().addListener((observable, oldValue, newValue) -> {
			if (newValue) {
				// TitledPane is expanded
				titleLabel.setTextFill(Color.web("#424242")); // Darker grey
			} else {
				// TitledPane is collapsed
				titleLabel.setTextFill(Color.web("#9E9E9E")); // Lighter grey
			}
		});
//		/**
//		 * This logic ensures that the validationImageView is only visible when the
//		 * TitledPane is collapsed and imageCount is not zero.
//		 */
		medicalDetailsPane.expandedProperty().addListener((observable, oldValue, newValue) -> {
			if (newValue) {
				// TitledPane is expanded
				medicalDetailLabel.setTextFill(Color.web("#424242")); // Darker grey

			} else {
				// TitledPane is collapsed
				medicalDetailLabel.setTextFill(Color.web("#9E9E9E")); // Lighter grey
			}
		});
		uploadTitledPane.expandedProperty().addListener((observable, oldValue, newValue) -> {
			if (newValue) {
				// TitledPane is expanded
				uploadLabel.setTextFill(Color.web("#424242")); // Darker grey
			} else {
				// TitledPane is collapsed
				uploadLabel.setTextFill(Color.web("#9E9E9E")); // Lighter grey
				uploadImageView.setVisible(uploadImage.getImageCount()!=0);
			}
		});
		for(TitledPane pane:accordion.getPanes())
		{
			pane.setStyle("-fx-background-color:#ffffff !important;");
			// Set the background color for the content inside each TitledPane
		    pane.getContent().setStyle("-fx-background-color:#ffffff !important;");
		}

		return accordion;
	}

//	public VBox createUpload() {
//
//		// Create a GridPane to hold the images
//		GridPane imageGrid = new GridPane();
//		imageGrid.setPadding(new Insets(10));
//		imageGrid.setHgap(10);
//		imageGrid.setVgap(10);
//		// Create a Rectangle to represent the drag target
//		VBox dragTarget = new VBox();
//
//		dragTarget.setBorder(new Border(
//				new BorderStroke(Color.BLACK, BorderStrokeStyle.SOLID, new CornerRadii(5), new BorderWidths(1))));
//		dragTarget.setPrefSize(100, 300);
//
//		// Setup drag-and-drop events
//		dragTarget.setOnDragOver(event -> {
//			if (event.getGestureSource() != dragTarget && event.getDragboard().hasFiles()) {
//				event.acceptTransferModes(TransferMode.COPY_OR_MOVE);
//				dragTarget.setStyle("-fx-background-color: white;");
//			}
//			event.consume();
//		});
//
//		dragTarget.setOnDragEntered(event -> {
//			if (event.getGestureSource() != dragTarget && event.getDragboard().hasFiles()) {
//				// dragTarget.setFill(Color.GREEN);
//				dragTarget.setStyle("-fx-background-color: white;");
//
//			}
//			event.consume();
//		});
//
//		dragTarget.setOnDragExited(event -> {
//			// dragTarget.setFill(Color.LIGHTGRAY);
//			dragTarget.setStyle("-fx-background-color: white;");
//			event.consume();
//		});
//
//		dragTarget.setOnDragDropped(event -> {
//			Dragboard db = event.getDragboard();
//			boolean success = false;
//			if (db.hasFiles()) {
//				success = true;
//				for (File file : db.getFiles()) {
//					displayImage(file, imageGrid);
//				}
//				event.setDropCompleted(success);
//				event.consume();
//			}
//		});
//
//		// Button to upload from computer
//		Button uploadFromComputerButton = new Button("UPLOAD FROM COMPUTER");
//		// uploadContent.getChildren().add(uploadFromComputerButton);
//		uploadFromComputerButton.setPrefSize(440, 28);
//		uploadFromComputerButton.setStyle("-fx-background-color: orange; " + // Set
//				"-fx-text-fill: white; " + // Set the text
//				"-fx-font-weight: bold; " + // Set the font weight to bold
//				"-fx-border-radius: 5;" // Set the border radius (adjust the value as needed)
//		);
//
//		uploadFromComputerButton.setOnAction(event -> {
//			FileChooser fileChooser = new FileChooser();
//			fileChooser.getExtensionFilters()
//					.add(new FileChooser.ExtensionFilter("Image Files", "*.png", "*.jpg", "*.jpeg", "*.gif", "*.tiff"));
//			properties1 = new Properties();
//			try {
//				// Load the properties file
//				properties1.load(new FileInputStream("settings.properties"));
//
//				// Get the property value and print it out
//				String selectedPath = properties1.getProperty("imagepath");
//				System.out.println("Selected Value: " + selectedPath);
//				fileChooser.setInitialDirectory(new File(selectedPath));
//
//			} catch (IOException ex) {
//				ex.printStackTrace();
//			}
//
//			File selectedFile = fileChooser.showOpenDialog(null);
//			if (selectedFile != null) {
//				displayImage(selectedFile, imageGrid);
//			}
//		});
//		VBox root = new VBox(10);
//		VBox vbox1 = new VBox(10);
//		vbox1.setPadding(new Insets(4, 0, 0, 0));
//		Label label = new Label("Drag and drop files into this container");
//		imageView = new ImageView(new Image("file:C:\\Auto_Uplaoder\\drag.jpg"));
//		imageView.setFitHeight(80);
//		imageView.setFitWidth(100);
//		vbox1.getChildren().addAll(uploadFromComputerButton, label, imageView);
//		vbox1.setAlignment(Pos.CENTER);
//
//		// Create a root layout and add the components
//
//		imageGrid.setAlignment(Pos.CENTER);
//
//		dragTarget.getChildren().addAll(vbox1, imageGrid);
//
//		root.getChildren().add(dragTarget);
//		root.setStyle("-fx-background-color: white;");
//		return root;
//
//	}

//	public List<Image> loadImages(List<File> selectedFiles) {
//		return selectedFiles.stream().map(file -> new Image(file.toURI().toString())).collect(Collectors.toList());
//
//	}

	/***
	 * creating a form
	 * 
	 * @return Grid pane
	 */
	private VBox createPatientDetailsForm(Label label) {
		VBox personalDetailsVBox = new VBox(3);
PersonalDetails personalDetaails=new PersonalDetails();
		//GridPane personalGridPane = Utilty.personalGridForUpload(label);
GridPane personalGridPane=personalDetaails.personalGridForUpload(label);
        //// ADDING SUBMIT BUTTON
		VBox vboxContinueButton = new VBox();
		Button uploadButton = new Button("CONTINUE");
		vboxContinueButton.getChildren().add(uploadButton);
		vboxContinueButton.setAlignment(Pos.CENTER);
		uploadButton.setPrefSize(550, 30);
		uploadButton.setStyle("-fx-background-color: orange; " + // Set the background color to orange
				"-fx-text-fill: white; " + // Set the text color to white
				"-fx-font-weight: bold; " + // Set the font weight to bold
				" -fx-border-radius: 10px;"+"-fx-background-radius: 10px;" // Set the border radius (adjust the value as needed)
		);

		// Set up the button action and validation
		setupContinueButton(uploadButton,personalDetaails);
		personalDetailsVBox.getChildren().addAll(personalGridPane, vboxContinueButton);
		return personalDetailsVBox;
	}

	/**
	 * creating medical record form
	 * 
	 * @return gridpane
	 */

	private ScrollPane showMedicalDetailsForm() {

	//	GridPane v1 = Utilty.medicalRecordGRidPane();
		MedicalDetails medicalDetails=new MedicalDetails();
		GridPane v1=medicalDetails.medicalRecordGRidPane();
		VBox medVbox = new VBox();
		Button submitButton = new Button("SUBMIT");
		submitButton.setPrefSize(500, 35);
		submitButton.setStyle("-fx-background-color: orange; " + // Set the background color to orange
				"-fx-text-fill: white; " + // Set the text color to white
				"-fx-font-weight: bold; " + // Set the font weight to bold
				"-fx-border-radius: 10;"+"-fx-background-radius:10;" // Set the border radius (adjust the value as needed)
		);
		submitButton.setOnAction(e -> {

			boolean medidicalDetilsValid=handleSubmit(medicalDetails);
			if(medidicalDetilsValid)
			{
				medicalImageView.setVisible(true);
			}
		});
		GridPane.setColumnSpan(submitButton, 2);
		medVbox.getChildren().addAll(v1, submitButton);
		medVbox.setSpacing(5);

		ScrollPane medicalScpane = new ScrollPane(medVbox);

		return medicalScpane;
	}

	private boolean handleSubmit(MedicalDetails medicalDetails) {
		
		if(medicalDetails.validateMedicalField())
		{
		return true;	
		}
		return false;

	}

//	private void displayImage(File file, GridPane imageGrid) {
//		try {
//			String imageType = Files.probeContentType(file.toPath());
//			if (imageType != null && imageType.startsWith("image")) {
//				// Set the dragImageView invisible on first image drop
//				if (imageCount == 0) {
//					imageView.setVisible(false);
//					imageView.setFitWidth(1);
//					imageView.setFitHeight(1);
//				}
//				Image image = new Image(new FileInputStream(file));
//				ImageView imageView = new ImageView(image);
//				imageView.setFitWidth(100);
//				imageView.setFitHeight(100);
//				imageView.setPreserveRatio(true);
//
//				int column = imageCount % 4;
//				int row = imageCount / 4;
//
//				imageGrid.add(imageView, column, row);
//				imageCount++;
//			}
//		} catch (IOException e) {
//			e.printStackTrace();
//		}
//	}

	public void setupContinueButton(Button uploadButton, PersonalDetails personalDetaails) {
		uploadButton.setOnAction(event -> {
			System.out.println("name value is " + Utilty.getNameTextField());
			System.out.println("mrn value is" + Utilty.getMrnTextField());

			if (personalDetaails.validateFormFields()) {
				validaionimageView.setVisible(true);
				patientDetailsPane.setExpanded(false); // Assuming patientDetailsPane is defined elsewhere
				uploadTitledPane.setExpanded(true); // Assuming uploadTitledPane is defined elsewhere
			}

		});
	}
	// This method retrieves the TextField from the GridPane
//	public static TextField getNameTextFieldFromGridPane(GridPane gridPane) {
//	    // Assuming the VBox containing the HBox with TextField is in the first row and first column
//	    VBox vboxForNameAndErrorLabel = (VBox) gridPane.getChildren().get(0);
//	    HBox hboxForNameAndTextBox = (HBox) vboxForNameAndErrorLabel.getChildren().get(0);
//	    TextField nameTextField = (TextField) hboxForNameAndTextBox.getChildren().get(1); // Assuming the TextField is at index 1 in the HBox
//	    return nameTextField;
//	}
}
