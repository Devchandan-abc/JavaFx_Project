package com.autouploader;
import javafx.animation.PauseTransition;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.stage.Stage;
import javafx.util.Duration;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Map;

import com.eyepacs.ext.connectors.https.HttpsConnectors;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;

import ext.eyepacs.encryptor.aes.EyePacsEncryptorAES;

public class DashBoardResult {
	private Stage stage;
	private String userName;
	private String passWord;
	private ComboBox<String> siteCombo;
	private VBox vboxForRefreshImageView;
	private VBox vboxForUpcomingAppointment;
	public void displayResult(Stage stageForDashBoardResult, BorderPane borderPane, String result, Pane fixedRec,
			String userName, String password,ComboBox<String> siteCombo) throws FileNotFoundException {
		this.stage = stageForDashBoardResult;
		this.userName=userName;
		this.passWord=password;
		this.siteCombo=siteCombo;
		VBox mainContentVbox = new VBox(10);
		VBox resultContent = new VBox(15);
		resultContent.setPrefSize(520, 550);
		resultContent.setPadding(new Insets(0, 0, 0, 20));
		String greeting = generateGreeting(userName);
		Label greetingLabel = new Label(greeting);
		greetingLabel.setStyle("-fx-font-size: 18px; -fx-font-weight: bold;");
        //// GETTING TODAYS DATE
		LocalDate todayDate = LocalDate.now();
		DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("MMMM dd ,yyyy");
		String date = todayDate.format(dateTimeFormatter);
		/// Today's date label
		Label dateLabel = new Label(date);
		dateLabel.setStyle("-fx-font-size: 9 px;");
		HBox greetingHbox = new HBox(16);
		// Align the dateLabel at the bottom within the HBox
		HBox.setMargin(dateLabel, new Insets(10, 0, 0, 0)); // Adjust the margin as needed

		greetingHbox.setPadding(new Insets(10, 0, 0, 17));
		greetingHbox.getChildren().addAll(greetingLabel, dateLabel);
		//// ALERT SECTION 
		VBox vboxMainAlert = new VBox(5);
		HBox alertLabelHbox = new HBox(120);
		alertLabelHbox.setBorder(new Border(
				new BorderStroke(Color.LIGHTGRAY, BorderStrokeStyle.SOLID, new CornerRadii(3), new BorderWidths(.1))));
		HBox alertDetailsHbox = new HBox(15);
		Label alertLabel = new Label("Alerts");
		alertLabel.setFont(Font.font("Arial", FontWeight.BOLD, 15));
		Button btn = new Button();
		ImageView image = new ImageView(new Image(new FileInputStream("resources/images/downarrow.png")));
		image.setFitWidth(10);
		image.setFitHeight(10);
		HBox hboxContaingbtnandImage = new HBox();
		// settng the child node at the bottom.
		hboxContaingbtnandImage.setAlignment(Pos.BOTTOM_LEFT);
		hboxContaingbtnandImage.getChildren().addAll(btn, image);
		btn.setStyle("-fx-background-color: white; -fx-border-color: black; -fx-border-width: .5px;");
		btn.setOnAction(e -> System.out.println("hello"));

		btn.setPrefWidth(10);
		alertLabelHbox.getChildren().addAll(alertLabel, hboxContaingbtnandImage);

		alertLabelHbox.setPadding(new Insets(5, 5, 5, 5));
		alertLabelHbox.setBorder(new Border(
				new BorderStroke(Color.LIGHTGRAY, BorderStrokeStyle.SOLID, new CornerRadii(1), new BorderWidths(.8))));

		HBox hbox1 = createAlert("Jan 24", "patients review is done", "uplaod_icon.png");
		HBox hbox2 = createAlert("Jan 28", "not reviewd", "upload_icon.png");
		vboxMainAlert.getChildren().addAll(alertLabelHbox, hbox1, hbox2);
		vboxMainAlert.setPadding(new Insets(5, 5, 5, 5));
		vboxMainAlert.setBorder(new Border(
				new BorderStroke(Color.LIGHTGRAY, BorderStrokeStyle.SOLID, new CornerRadii(3), new BorderWidths(.7))));
		HBox siteStatsAndAlertsBox = new HBox(200);
		VBox upcomingAppointmentsTable = createUpcomingAppointmentsTable();
	//	vboxForRefreshImageView=new VBox(refreshImageView);
		resultContent.getChildren().add(upcomingAppointmentsTable);
		/// Hbox for the alert and the patients statics and table
		HBox hboxForsiteStaticsTableandalert = new HBox(100);
		hboxForsiteStaticsTableandalert.getChildren().addAll(resultContent, vboxMainAlert);
		// main content

		mainContentVbox.getChildren().addAll(greetingHbox, hboxForsiteStaticsTableandalert);

		fixedRec.getChildren().clear();

		fixedRec.getChildren().add(mainContentVbox);

		// Optional: Print the result to verify its content
		System.out.println("Result Content: " + result);

		// Assuming 'siteComboBox' is already defined and contains the values.
		siteCombo.setOnAction(e -> {
		    // Clear or remove the current content at the desired index (e.g., 1)
		   // vboxForUpcomingAppointment.getChildren().remove(1);  // Assuming index 1 is where the content goes
		    try {
		        // Now fetch only the content that needs to be replaced, like a TableView or similar content
		        TableView<Appointment> appointmentTableViewNew= createAppointmentTable();

		        // Replace the content at index 1 with the new table or updated content
		        vboxForUpcomingAppointment.getChildren().set(1, appointmentTableViewNew);  // Replacing the second element

		    } catch (FileNotFoundException e1) {
		        e1.printStackTrace();
		    }
		});

	}
	

	/**
	 * 
	 * @param user
	 * @return the generated based on the user name login
	 */
	public String generateGreeting(String user) {
		// this.userLogin=userLogin;

		String[] userLabel = user.split(" ");
		StringBuilder sb = new StringBuilder();
		sb.append(Character.toUpperCase(userLabel[0].charAt(0))).append(userLabel[0].substring(1).toLowerCase());

		// get the Local time
		LocalTime now = LocalTime.now();
		int hour = now.getHour();

		if (hour >= 6 && hour < 12) {
			return "Good Morning ," + sb;
		} else if (hour >= 12 && hour < 18) {
			return "Good Afternoon ," + sb;

		} else {
			return "Good Evening ," + sb;
		}
	}
	private HBox createAlert(String date, String description, String imageName) throws FileNotFoundException {
		// VBox vboxForalertBox = new VBox(10);
		HBox hboxForalertdesc = new HBox(10);

		// Date label
		Label dateLabel = new Label(date);
		dateLabel.setStyle("-fx-font-weight: bold;");

		// Description label
		Label descriptionLabel = new Label(description);
		ImageView alertImage = new ImageView(new Image(new FileInputStream("resources/images/" + imageName)));
		alertImage.setFitWidth(25); // Set your desired width
		alertImage.setFitHeight(25); // Set your desired height
		hboxForalertdesc.getChildren().addAll(dateLabel, descriptionLabel, alertImage);
		return hboxForalertdesc;
	}

	private VBox createUpcomingAppointmentsTable() throws FileNotFoundException {
		ImageView refreshImageView=new ImageView(new Image(new FileInputStream("resources/images/loading_gif.gif")));
		vboxForRefreshImageView=new VBox(refreshImageView);
		refreshImageView.setFitHeight(30);
		refreshImageView.setFitWidth(30);
		//vboxForRefreshImageView.setAlignment(Pos.CENTER);
		// Create a VBox to hold the label and the TableView
		vboxForUpcomingAppointment = new VBox(20);
		vboxForUpcomingAppointment.setBorder(new Border(
				new BorderStroke(Color.LIGHTGRAY, BorderStrokeStyle.SOLID, new CornerRadii(5), new BorderWidths(.5))));
		vboxForUpcomingAppointment.setPadding(new Insets(10));
		//vbox.setAlignment(Pos.CENTER);
		// Add a label to indicate upcoming appointments
		Label label = new Label("Upcoming Appointments");	
		label.setFont(Font.font("Arial", FontWeight.BOLD, 16));
	    refreshImageView.setVisible(true);
	    refreshImageView.setManaged(true);

	    // Create a pause transition to simulate loading delay
	 //   PauseTransition pause = new PauseTransition(Duration.millis(100));  // Adjust to 300ms or more
	    // Run the loading and table update after the pause
	 //   pause.setOnFinished(e -> {
	     //   try {
	            // Fetch data and create the TableView
	        	TableView<Appointment> appointmentTableView=createAppointmentTable();

	            // Replace the loading gif with the TableView
	      //  	vboxForUpcomingAppointment.getChildren().addAll(label,appointmentTableView);


	//} 
//	        catch (FileNotFoundException e1) {
//	            e1.printStackTrace();
//	        }

	        // Hide the loading gif after fetching the data
	        refreshImageView.setVisible(false);
	        refreshImageView.setManaged(false);

	 //   });

	    // Start the pause transition
	   // pause.play();


		/// Adding patient link  calling the utility methods
		Button btn=new Button();
		StackPane plusStackPane=Utilty.addPatientCalled(btn, stage);
		plusStackPane.setPadding(new Insets (0,0,0,400));
		// Add the label and the TableView to the VBox
		vboxForUpcomingAppointment.getChildren().addAll(label, appointmentTableView, plusStackPane);
		return vboxForUpcomingAppointment;
	}
	
	private TableView<Appointment> createAppointmentTable() throws FileNotFoundException
	{
		// Create and populate the TableView with upcoming appointments data
				TableView<Appointment> appointmentsTable = new TableView<>();
				// Add columns to the TableView (e.g., Name, Ordering Provider, Date Ordered)
				TableColumn<Appointment, String> nameColumn = new TableColumn<>("Name");
				nameColumn.setStyle("-fx-background-color:white;");
				nameColumn.setSortable(false);
				TableColumn<Appointment, String> orderingProviderColumn = new TableColumn<>("Ordering Provider");
				orderingProviderColumn.setStyle("-fx-background-color:white");
				TableColumn<Appointment, LocalDate> dateOrderedColumn = new TableColumn<>("Date Ordered");
				dateOrderedColumn.setStyle("-fx-background-color:white");
				TableColumn<Appointment, Button> imageUpload = new TableColumn<>("Upload");
				imageUpload.setStyle("-fx-background-color:white");
				appointmentsTable.setStyle("-fx-background-color: white");
				appointmentsTable.getColumns().addAll(nameColumn, orderingProviderColumn, dateOrderedColumn, imageUpload);
				Image image1 = new Image(new FileInputStream("resources/images/Help.png"));
				ImageView imageView1 = new ImageView(image1);
				imageView1.setFitHeight(12);
				imageView1.setFitWidth(12);
				Image image2 = new Image(new FileInputStream("resources/images/right arrow.jfif"));
				ImageView imageView2 = new ImageView(image2);
				imageView2.setFitWidth(12);
				imageView2.setFitHeight(12);
				// Populate the TableView with data (replace this with your actual data)
				ObservableList<Appointment> imgList = FXCollections.observableArrayList();

				nameColumn.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getName()));
				orderingProviderColumn
						.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getOrderingProvider()));
				dateOrderedColumn.setCellValueFactory(data -> new SimpleObjectProperty<>(data.getValue().getOrderedDate()));
				//imageUpload.setCellValueFactory(data -> new SimpleObjectProperty<>(data.getValue().getBtn()));
				imageUpload.setCellValueFactory(data -> new SimpleObjectProperty<>(data.getValue().getBtn()));
				
//				        try {
				            // Fetch and display patient data after the delay
				        	 Map<HttpsConnectors.RESPONSE, String> responseListForPatient = getLastSixMonthData(userName, passWord);
				 		    String jsonResponse = responseListForPatient.get(HttpsConnectors.RESPONSE.VALUE);

				 		    Gson gson = new Gson();
				 		    JsonObject jsonObject = gson.fromJson(jsonResponse, JsonObject.class);
				 		    JsonArray patientList = jsonObject.getAsJsonArray("patient_list");

				 		    for (JsonElement patientElement : patientList) {
				 		        JsonObject patientObject = patientElement.getAsJsonObject();

				 		        String patientName = patientObject.get("patientName").getAsString();
				 		        int patientId = patientObject.get("patientId").getAsInt();
				 		        int caseId = patientObject.get("caseId").getAsInt();
				 		        String caseStatus = patientObject.get("caseStatus").getAsString();

				 		        // Handle the dateCreated value
				 		        LocalDate dateCreated = null;
				 		        JsonElement dateCreatedElement = patientObject.get("dateCreated");
				 		        if (dateCreatedElement != null && !dateCreatedElement.isJsonNull()) {
				 		            try {
				 		                dateCreated = Utilty.parseDate(dateCreatedElement.getAsString());
				 		            } catch (IllegalArgumentException e) {
				 		                System.err.println("Error parsing dateCreated: " + e.getMessage());
				 		                // You might want to log this error or handle it in some way
				 		            }
				 		        }

				 		        // Handle the imageAddedDate value
				 		        LocalDate imageAddedDate1 = null;
				 		        JsonElement imageAddedDateElement = patientObject.get("imageAddedDate");
				 		        if (imageAddedDateElement != null && !imageAddedDateElement.isJsonNull()) {
				 		            try {
				 		                imageAddedDate1 = Utilty.parseDate(imageAddedDateElement.getAsString());
				 		            } catch (IllegalArgumentException e) {
				 		                System.err.println("Error parsing imageAddedDate: " + e.getMessage());
				 		                // You might want to log this error or handle it in some way
				 		            }
				 		        }

				 		        String uploadedByPatient = patientObject.get("uploadedBy").getAsString();

				 		        // Add new Patient data with null checks
				 		        imgList.add(new Appointment(patientName, uploadedByPatient,dateCreated, btnForPatient()));
				 		    }
				 		 // Set the column resize policy to constrained
				 			appointmentsTable.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
				 		appointmentsTable.setItems(imgList);
				 		return appointmentsTable;
				 		
	}
	
	private Button btnForPatient() throws FileNotFoundException {
		Image shortcutImage = new Image(new FileInputStream("resources/images/vertical_png.png"));
		ImageView shortCutImageView = new ImageView(shortcutImage);

		shortCutImageView.setFitWidth(15);
		shortCutImageView.setFitHeight(15);
		Button btnForContectMenu = new Button();
		btnForContectMenu.setStyle("-fx-background-color: transparent; -fx-border-color: transparent;");
		btnForContectMenu.setGraphic(shortCutImageView);
		return btnForContectMenu;

}
	
	private Map<HttpsConnectors.RESPONSE, String> getLastSixMonthData(String userName,String password)
	{
	
		String credString = new EyePacsEncryptorAES().encryptEyePacsCredentials(userName, password);
		 // Original JSON string
        String jsonString = "{\"dateString\" : \"20240801\", \"caseStatus\" : \"scheduled\"}";
        
        // Call method to get the current date
        String thisMonthDate = getThisMonthDate();
        
        // Replace "20240801" with the new date string
        jsonString = jsonString.replace("20240801", thisMonthDate);
        Utilty utilty=new Utilty();
	String urlForLastSixMonth="/uploader/patient/list/byDate/"+utilty.getSiteIdFromComboBox(userName, password, siteCombo);
	//	String lastSixMonthDate=getSixMonthsAgoDate();
		HttpsConnectors connector = new HttpsConnectors(
						HttpsConnectors.SERVER.LOCALHOST,urlForLastSixMonth, HttpsConnectors.METHOD.POST);
				Map<HttpsConnectors.RESPONSE, String> response = connector.apiConnect(jsonString, credString, "text/plain", "application/json");
		 System.out.println("Response = " + response.get(HttpsConnectors.RESPONSE.CODE));
		 System.out.println("Response value = " + response.get(HttpsConnectors.RESPONSE.VALUE));
		return response;
		
	}
	public static String getSixMonthsAgoDate() {
        LocalDate sixMonthsAgo = LocalDate.now().minusMonths(6);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMdd");
        return sixMonthsAgo.format(formatter);
    }
	public static String getLastThreeMonthDate()
	{
	    LocalDate sixMonthsAgo = LocalDate.now().minusMonths(3);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMdd");
        return sixMonthsAgo.format(formatter);
	}
	  // Method for Last Week (7 days ago)
    public static String getLastWeekDate() {
        LocalDate lastWeek = LocalDate.now().minusWeeks(1);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMdd");
        return lastWeek.format(formatter);
    }
    // Method for This Month (1st day of the current month)
    public static String getThisMonthDate() {
        LocalDate firstDayOfThisMonth = LocalDate.now().withDayOfMonth(1);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMdd");
        return firstDayOfThisMonth.format(formatter);
    }
	
}